---
title: "Midterm Assignment"
format:
  html: default
  pdf: default
execute:
  echo: false
  message: false
  error: false
  warning: false
jupyter: python3
---

```{python}
#| label: load-packages
#| message: false

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
```

::: callout-note
You can find the `blizzard_salary.csv` data [here](https://raw.githubusercontent.com/INFO-511-F24/data/main/blizzard_salary.csv).
:::

```{python}
#| label: blizzard-data-prep
blizzard_salary = pd.read_csv('data/blizzard_salary.csv')

# Data preparation
blizzard_salary['annual_salary'] = np.where(
    blizzard_salary['salary_type'] == 'week',
    blizzard_salary['current_salary'] * 52,
    np.where(
        blizzard_salary['salary_type'] == 'hour',
        blizzard_salary['current_salary'] * 40 * 52,
        blizzard_salary['current_salary']
    )
)

blizzard_salary['performance_rating'] = blizzard_salary['performance_rating'].replace('Developing', 'Poor')

blizzard_salary = blizzard_salary[blizzard_salary['salary_type'] != 'week']
blizzard_salary['salary_type'] = blizzard_salary['salary_type'].replace('hour', 'Hourly')
blizzard_salary['salary_type'] = blizzard_salary['salary_type'].replace('Salaried', 'Salaried')

blizzard_salary = blizzard_salary.dropna(subset=['annual_salary'])
blizzard_salary = blizzard_salary[['percent_incr', 'salary_type', 'annual_salary', 'performance_rating']]
```

In 2020, employees of Blizzard Entertainment circulated a spreadsheet to anonymously share salaries and recent pay increases amidst rising tension in the video game industry over wage disparities and executive compensation.
(Source: [Blizzard Workers Share Salaries in Revolt Over Pay](https://www.bloomberg.com/news/articles/2020-08-03/blizzard-workers-share-salaries-in-revolt-over-wage-disparities))

The name of the data frame used for this analysis is `blizzard_salary` and the variables are:

-   `percent_incr`: Raise given in July 2020, as percent increase with values ranging from 1 (1% increase to 21.5 (21.5% increase)

-   `salary_type`: Type of salary, with levels `Hourly` and `Salaried`

-   `annual_salary`: Annual salary, in USD, with values ranging from \$50,939 to \$216,856.

-   `performance_rating`: Most recent review performance rating, with levels `Poor`, `Successful`, `High`, and `Top`.
    The `Poor` level is the lowest rating and the `Top` level is the highest rating.

The top ten rows and `.info` of `blizzard_salary` are shown below:

```{python}
print(blizzard_salary.head(10))
print(blizzard_salary.info())
```

## Question 1

Which of the following is [**correct**]{.underline}?
Choose all that apply.

a.  The `blizzard_salary` dataset has 399 rows.

b.  The `blizzard_salary` dataset has 4 columns.

c.  Each row represents a Blizzard Entertainment worker who filled out the spreadsheet.

d.  The `percent_incr` variable is numerical and discrete.

e.  The `salary_type` variable is numerical.

f.  The `annual_salary` variable is numerical.

g.  The `performance_rating` variable is categorical and ordinal.

::: {.content-visible when-format="pdf"}
$\vspace{1cm}$
:::

## Question 2

@fig-blizzard-hist-1 and @fig-blizzard-hist-2 show the distributions of annual salaries of hourly and salaried workers.
The two figures show the same data, with the facets organized across rows and across columns.
Which of the two figures is better for comparing the median annual salaries of hourly and salaried workers.
Explain your reasoning.

::: {#fig-blizzard-hist}
```{python}
#| label: fig-blizzard-hist-1
#| fig-cap: Option 1
#| fig-width: 8
#| fig-asp: 0.5

sns.histplot(data=blizzard_salary, x='annual_salary', hue='salary_type', multiple='dodge', binwidth=10000, kde=False)
plt.xlabel('Annual salary (in USD)')
plt.ylabel('Count')
plt.show()
```

```{python}
#| label: fig-blizzard-hist-2
#| fig-cap: Option 2
#| fig-width: 8
#| fig-asp: 0.3

sns.histplot(data=blizzard_salary, x='annual_salary', hue='salary_type', multiple='stack', binwidth=10000, kde=False)
plt.xlabel('Annual salary (in USD)')
plt.ylabel('Count')
plt.show()
```

Distribution of annual salaries of Blizzard employees
:::

{{< pagebreak >}}

## Question 3

Suppose your teammate wrote the following code as part of their analysis of the data.

```{python}
#| label: blizzard-summarize
#| eval: false
#| echo: true

blizzard_summary = blizzard_salary.groupby('salary_type').agg(
    mean_annual_salary=('annual_salary', 'mean'),
    median_annual_salary=('annual_salary', 'median')
).reset_index()

print(blizzard_summary)
```

They then printed out the results shown below.
Unfortunately one of the numbers got erased from the printout.
It's indicated with `_____` below.

```         
  salary_type    mean_annual_salary    median_annual_salary
  Hourly         63003.                54246.
  Salaried       90183.                _____
```

Which of the following is the best estimate for that erased value?

a.  30,000

b.  50,000

c.  80,000

d.  100,000

## Question 4

Which distribution of annual salaries has a higher standard deviation?

a.  Hourly workers

b.  Salaried workers

c.  Roughly the same

{{< pagebreak >}}

## Question 5

Which of the following alternate plots would also be useful for visualizing the distributions of annual salaries of hourly and salaried workers?
Choose all that apply.

a\.
Box plots

b\.
Density plots

c\.
Pie charts

d\.
Waffle charts

e\.
Histograms

f\.
Scatterplots

{{< pagebreak >}}

## Questions 6 and 7

Suppose you made the bar plot shown in @fig-performance-rating-1 to visualize the distribution of `performance_rating` and your teammate made the bar plot shown in @fig-performance-rating-2.

```{python}
#| label: fig-performance-rating
#| layout-ncol: 2
#| fig-cap: Distribution of performance rating
#| fig-width: 5
#| fig-asp: 0.5
#| fig-subcap: 
#|   - Option 1
#|   - Option 2

# Your plot
sns.countplot(data=blizzard_salary, x='performance_rating')
plt.title('Performance rating of Blizzard employees')
plt.xlabel('Performance rating')
plt.ylabel('Count')
plt.show()

# Teammate's plot
blizzard_salary['performance_rating'] = pd.Categorical(blizzard_salary['performance_rating'], categories=["Poor", "Successful", "High", "Top"], ordered=True)
sns.countplot(data=blizzard_salary, x='performance_rating')
plt.title('Performance rating of Blizzard employees')
plt.xlabel('Performance rating')
plt.ylabel('Count')
plt.show()
```

You made your bar plot without transforming the data in any way, while your friend did first transform the data with code like the following:

```{python}
#| eval: false
#| echo: true

blizzard_salary['performance_rating'] = pd._(1)_(blizzard_salary['performance_rating'], categories=[_(2)_], ordered=True)
```

**Question 6:** What goes in the blank (1)?

a.  `.sort_values()`

b.  `.Categorical()`

c.  `.groupby()`

d.  `.fillna()`

**Question 7:** What goes in the blank (2)?

a.  `"Poor", "Successful", "High", "Top"`

b.  `"Successful", "High", "Top"`

c.  `"Top", "High", "Successful", "Poor"`

d.  `Poor, Successful, High, Top`

{{< pagebreak >}}

## Questions 8 - 10

Finally, another teammate creates the following two plots.

```{python}
#| label: fig-salary-performance-rating
#| layout-ncol: 2
#| fig-cap: Distribution of salary type by performance rating
#| fig-width: 5
#| fig-asp: 0.5
#| fig-subcap: 
#|   - Option 1
#|   - Option 2

# Option 1
sns.countplot(data=blizzard_salary.dropna(subset=['salary_type', 'performance_rating']), x='salary_type', hue='performance_rating')
plt.xlabel('Salary type')
plt.ylabel('Count')
plt.legend(title='Performance rating')
plt.show()

# Option 2
sns.histplot(data=blizzard_salary.dropna(subset=['salary_type', 'performance_rating']), x='salary_type', hue='performance_rating', multiple='fill')
plt.xlabel('Salary type')
plt.ylabel('Proportion')
plt.legend(title='Performance rating')
plt.show()
```

**Question 8:** Your teammate asks you for help deciding which one to use in the final report for visualizing the relationship between performance rating and salary type.
In 1-3 sentences, can you help them make a decision, justify your choice, and write the narrative that should go with the plot?

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

**Question 9:** A friend with a keen eye points out that the number of observations in @fig-salary-performance-rating-1 seems lower than the total number of observations in `blizzard_salary`.
What might be going on here?
Explain your reasoning.

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$

{{< pagebreak >}}
:::

**Question 10:** Below are the proportions of performance ratings for hourly and salaried workers.
Recreate the plot in @fig-salary-performance-rating-2, then interpret how the results from the table and within the plot relate to each other.

```{python}
#| label: salary-type-perfecormance-table

# Calculate proportions
proportions = blizzard_salary.dropna(subset=['salary_type', 'performance_rating']).groupby(['salary_type', 'performance_rating']).size().unstack().apply(lambda x: x / x.sum())
print(proportions)

```

::: {.content-visible when-format="pdf"}
{{< pagebreak >}}
:::

## Questions 11 and 12

The table below shows the distribution of `salary_type` and `performance_rating`.

```{python}
filtered_df = blizzard_salary[(blizzard_salary['salary_type'] != "Hourly") & (blizzard_salary['performance_rating'] == "Poor")]
filtered_df = filtered_df.sort_values(by='annual_salary')
print(filtered_df)
```

The pipeline below produces a data frame with a fewer number of rows than `blizzard_salary`.

```{python}
#| eval: false
#| echo: true
filtered_df = blizzard_salary[(blizzard_salary['salary_type'] _(1)_ "Hourly") _(2)_ (blizzard_salary['performance_rating'] == "Poor")]
filtered_df = filtered_df._(3)_(by='annual_salary')
print(filtered_df)

```

```{python}
#| echo: false

filtered_df = blizzard_salary[(blizzard_salary['salary_type'] != "Hourly") & (blizzard_salary['performance_rating'] == "Poor")]
filtered_df = filtered_df.sort_values(by='annual_salary')
print(filtered_df)

```

**Question 11:** Which of the following goes in blanks (1) and (2)?

|     | \(1\) | \(2\) |
|-----|:-----:|:-----:|
| a\. | `!=`  |  `|`  |
| b\. | `==`  |  `&`  |
| c\. | `!=`  |  `&`  |
| d\. | `==`  |  `|`  |

::: {.content-visible when-format="pdf"}
$\vspace{1cm}$
:::

**Question 12:** Which function or functions go into blank (3)?

a.  `.sort_values()`

b.  `.assign()`

c.  `.groupby()`

d.  `.aggregate()`

::: {.content-visible when-format="pdf"}
$\vspace{1cm}$
:::

## Question 13

You're reviewing another team's work and they made the following visualization:

```{python}
#| warning: false
#| fig-width: 10
#| fig-asp: 0.5

sns.scatterplot(data=blizzard_salary, x='annual_salary', y='percent_incr', hue='performance_rating')
plt.xlabel('Annual Salary')
plt.ylabel('Percent Increase')
plt.show()
```

And they wrote the following interpretation for the relationship between annual salary and percent increase for Top performers:

> The relationship is positive, having a higher salary results in a higher percent increase.
> There is one clear outlier.

Which of the following is/are the most accurate and helpful) peer review note for this interpretation.
Choose all that apply.

a.  The interpretation is complete and perfect, no changes needed!

b.  The interpretation doesn't mention the direction of the relationship.

c.  The interpretation doesn't mention the form of the relationship, which is linear.

d.  The interpretation doesn't mention the strength of the relationship, which is somewhat strong.

e.  There isn't a clear outlier in the plot.
    If any points stand out as potential outliers, more guidance should be given to the reader to identify them (e.g., salary and/or percent increase amount).

f.  The interpretation is causal – we don't know if the cause of the high percent increase is higher annual salary based on observational data.
    The causal direction might be the other way around, or there may be other factors contributing to the apparent relationship.

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$

{{< pagebreak >}}
:::

## Question 14

Below is some code and its output.

```{{python}}
# label=plot blizzard

sns.boxplot(data=blizzard_salary, x='performance_rating', y='percent_incr')
plt.xlabel('Performance rating')
plt.ylabel('Percent increase')
plt.show()

```

```{python}
#| echo: false
#| warning: true
#| fig-width: 8
#| fig-asp: 0.4
sns.boxplot(data=blizzard_salary,x='performance_rating',y='percent_incr')
plt.xlabel('Performance rating') 
plt.ylabel('Percent increase') 

```

Part 1: List at least 3 things that should be fixed or improved in the code.

::: {.content-visible when-format="pdf"}
$\vspace{5cm}$
:::

Part 2: How could we show missing values in this plot?

{{< pagebreak >}}

## Question 15

You're working on a data analysis on salaries of Blizzard employees in a Quarto document in a project version controlled by Git.
You create a plot and write up a paragraph describing any patterns in it.
Then, your teammate says "render, commit, and push".

Part 1: What do they mean by each of these three steps.
In 1-2 sentences for each, explain in your own words what they mean.

1.  Render:

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

2.  Commit:

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

3.  Push:

::: {.content-visible when-format="pdf"}
$\vspace{2cm}$
:::

Part 2: Your teammate is getting impatient and they interrupt you after you rendered and committed and say "I still can't see your changes in our shared GitHub repo when I look at it in my web browser." Which of the following answers is the most accurate?

a.  I rendered my document, you should be seeing my changes on GitHub when you look at it in your web browser.

b.  I committed my changes, you should be seeing my changes on GitHub when you look at it in your web browser.

c.  I didn't yet push my changes, it's expected that you are not seeing them on GitHub when you look at it in your web browser.
    Wait until I push, and check again.

d.  You need to pull to see my changes on GitHub in the web browser.

## Bonus

Pick a concept we introduced in class so far that you've been struggling with and explain it in your own words.
