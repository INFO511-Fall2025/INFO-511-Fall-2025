---
title: "Data wrangling"
subtitle: "Lecture 7"
format:
  revealjs: default
editor_options: 
  chunk_output_type: console
jupyter: python3
execute:
  warning: false
  message: false
---

## Study tips for the exam

::: incremental
-   Go over lecture materials and application exercises
-   Review labs and feedback you've received so far
-   Do the exercises at the end of readings from both books
-   Do the exam review (to be posted on Friday)
:::

## Frequently asked question {.smaller}

**Is there a limit to a DataFrame size?**

No, a DataFrame can be any number of rows or columns.
However, when you print it, it will only print the first few rows and the columns that fit across the screen.

If you want to see more rows and columns, you can:

-   Open it in the data viewer with `df.head(n)`

-   Explicitly print more rows with, e.g., `print(df.head(25))`

-   Explicitly select or rearrange columns

## Options for a DataFrame {.smaller}

::: panel-tabset
## Default

```{python}
#| message: false

import pandas as pd

df = pd.read_csv('data/midwest.csv')
print(df)
```

## `print()`

```{python}
print(df.head(13))
```

## Subsetting

```{python}
selected_columns = df[['county', 'state', 'percbelowpoverty', 'percollege']]
print(selected_columns)
```

## Relocating

```{python}
relocated_columns = df[['county', 'state', 'percbelowpoverty', 'percollege', *df.columns.difference(['county', 'state', 'percbelowpoverty', 'percollege'])]]
print(relocated_columns)
```
:::

# Data wrangling

# Data wrangling <br> AKA Munging ðŸ¤®

# Joining datasets

## Why join? {.smaller}

Suppose we want to answer questions like:

> Is there a relationship between\
> - number of DS courses taken\
> - motivation for taking course\
> - ...\
> and performance in this course?"

. . .

Each of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.

## Setup

For the next few slides...

::: columns
::: {.column width="50%"}
```{python}
x = pd.DataFrame({
    'id': [1, 2, 3],
    'value_x': ['x1', 'x2', 'x3']
})
print(x)
```
:::

::: {.column width="50%"}
```{python}
y = pd.DataFrame({
    'id': [1, 2, 4],
    'value_y': ['y1', 'y2', 'y4']
})

print(y)
```
:::
:::

## Left join

::: columns
::: {.column width="50%"}
![](images/left-join.gif)
:::

::: {.column width="50%"}
```{python}
left_merged = pd.merge(x, y, on='id', how='left')
print(left_merged)
```
:::
:::

## Right join

::: columns
::: {.column width="50%"}
![](images/right-join.gif)
:::

::: {.column width="50%"}
```{python}
right_merged = pd.merge(x, y, on='id', how='right')
print(right_merged)
```
:::
:::

## Outer (full) join

::: columns
::: {.column width="50%"}
![](images/full-join.gif)
:::

::: {.column width="50%"}
```{python}
outer_merged = pd.merge(x, y, on='id', how='outer')
print(outer_merged)
```
:::
:::

## Inner join

::: columns
::: {.column width="50%"}
![](images/inner-join.gif)
:::

::: {.column width="50%"}
```{python}
inner_merged = pd.merge(x, y, on='id', how='inner')
print(inner_merged)
```
:::
:::

## Semi-join

::: columns
::: {.column width="50%"}
![](images/semi-join.gif)
:::

::: {.column width="50%"}
```{python}
semi_merged = x[x['id'].isin(y['id'])]
print(semi_merged)
```
:::
:::

## Anti-join

::: columns
::: {.column width="50%"}
![](images/anti-join.gif)
:::

::: {.column width="50%"}
```{python}
anti_merged = x[~x['id'].isin(y['id'])]
print(anti_merged)
```
:::
:::

::: fragment
ðŸ¤®
:::

## Pivoting (`.melt()`) {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long*, but they can be made *wider* or *longer* for a certain analysis that requires a certain format.

-   When pivoting longer, variable names that turn into values are characters by default.
    If you need them to be in another format, you need to explicitly make that transformation, which you can do within the `melt()` function.
:::

## `ae-05-majors-wrangling`
