---
title: "Meet the toolkit"
subtitle: "Lecture 1"
format:
  revealjs: default
---

## Announcements

-   If you have not yet completed the Getting to know you survey, please do so asap!

-   If you have not yet accepted the invite to join the course GitHub Organization, please do so asap!

-   Office hours linked at <https://datasciaz.netlify.app/course-team.html>

# From last time...

## Course homepage

Let's take a tour!

## Collaboration policy {.smaller}

-   Only work that is clearly assigned as team work should be completed collaboratively.

-   Homeworks must be completed individually.
    You may **not** directly share answers / code with others, however you are welcome to discuss the problems in general and ask for advice.

-   Exams must be completed individually.
    You may **not** discuss any aspect of the exam with peers.
    If you have questions, post as private questions on the course forum, only the teaching team will see and answer.

## Sharing / reusing code policy {.smaller}

-   We are aware that a huge volume of code is available on the web, and many tasks may have solutions posted

-   Unless explicitly stated otherwise, this course's policy is that you may make use of any online resources (e.g. RStudio Community, StackOverflow, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).

-   Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source

## Use of generative AI {.smaller}

-   Treat generative AI, such as ChatGPT, as an online resource.

-   Guiding principles:

    -   \(1\) *Cognitive dimension:* Working with AI should not reduce your ability to think clearly.
        We will practice using AI to facilitate—rather than hinder—learning.

    -   \(2\) *Ethical dimension***:** Students using AI should be transparent about their use and make sure it aligns with academic integrity.

-   **✅ AI tools for code:** You may make use of the technology for coding examples on assignments; if you do so, you must explicitly cite where you obtained the code.

-   **❌ AI tools for narrative:** Unless instructed, you may not use generative AI to write narrative on assignments.
    You may use generative AI as a resource as you complete assignments but not for answers.

## Academic integrity

> To uphold the [UArizona iSchool Community Standard](https://ischool.arizona.edu/sites/ischool.arizona.edu/files/iSchool%20Policy%20on%20Academic%20Integrity%20in%20Computing%202023%20-%20approved%20by%20faculty%20vote%20April%202023.pdf#:~:text=UArizona%20iSchool%20Instructors%20are%20expected%20to%20help%20students,prohibited%20in%20some%20courses%20are%20allowed%20in%20others.):

> -   I will not lie, cheat, or steal in my academic endeavors;
> -   I will conduct myself honorably in all my endeavors; and
> -   I will act if the Standard is compromised.

## Most importantly!

Ask if you're not sure if something violates a policy!

## Five tips for success

1.  Complete all the preparation work before class.

2.  Ask questions.

3.  Do the readings.

4.  Do the lab.

5.  Don’t procrastinate – at least on a weekly basis!

# Course toolkit

## Course toolkit {.smaller}

::: columns
::: {.column width="50%"}
**Course operation**

-   Materials: [datasciaz.netlify.app](https://datasciaz.netlify.app/)
-   Submission: GitHub
-   Discussion: Slack
-   Gradebook: D2L
:::

::: {.column width="50%"}
**Doing data science**

-   Computing:
    -   Python
    -   VS Code
    -   Quarto/Jupyter
-   Version control and collaboration:
    -   Git
    -   GitHub
:::
:::

# Toolkit: Computing

## Learning goals {.smaller}

By the end of the course, you will be able to...

::: incremental
-   gain insight from data
-   gain insight from data, **reproducibly**
-   gain insight from data, reproducibly, **using modern programming tools and techniques**
-   gain insight from data, reproducibly **and collaboratively**, using modern programming tools and techniques
-   gain insight from data, reproducibly **(with literate programming and version control)** and collaboratively, using modern programming tools and techniques
:::

# Reproducible data analysis

## Reproducibility checklist {.smaller}

::: question
What does it mean for a data analysis to be "reproducible"?
:::

. . .

**Short-term goals:**

-   Are the tables and figures reproducible from the code and data?
-   Does the code actually do what you think it does?
-   In addition to what was done, is it clear *why* it was done?

. . .

**Long-term goals:**

-   Can the code be used for other data?
-   Can you extend the code to do other things?

## Toolkit for reproducibility

-   Scriptability $\rightarrow$ Python
-   Literate programming (code, narrative, output in one place) $\rightarrow$ Quarto/Jupyter
-   Version control $\rightarrow$ Git / GitHub

# Python and Jupyter

## Python and Jupyter {.smaller}

::: columns
::: {.column width="50%"}
![](images/python.jpeg){fig-alt="R logo" fig-align="center" width="100"}

-   Python is an open-source general purpose **programming language**
-   Python is also an environment for statistical computing and graphics
-   It's easily extensible with *packages*
:::

::: {.column .fragment width="50%"}
![](images/Jupyter_logo.svg){fig-alt="RStudio logo" fig-align="center" width="100"}

-   Jupyter is a convenient interface for Python called an **IDE** (integrated development environment), e.g. *"I write Python code in the Jupyter IDE"*

<!-- -->

-   Jupyter is not a requirement for programming with Python, but it's very commonly used by Python programmers and data scientists
:::
:::

## Python vs. Jupyter

[![](images/python_vs_jupyter.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html) (modified).
:::

## Python packages {.smaller}

::: incremental
-   **Packages**: Fundamental units of reproducible Python code, including reusable Python modules/functions, the documentation that describes how to use them, and sample data<sup>1</sup>

-   As of 23 July 2024, there are 557,005 Python packages (projects) available on **PyPI** (the Python Package Index)<sup>2</sup>

-   We're going to work with a small (but important) subset of these!
:::

::: aside
<sup>1</sup> Beuzen and Timbers, [Python Packages](https://py-pkgs.org/).

<sup>2</sup> [PyPI contributed packages](https://pypi.org/).
:::

## Tour: Python + Jupyter (via VS Code) {.smaller}

::: columns
::: {.column width="50%"}
::: demo
**Option 1:**

Sit back and enjoy the show!
:::
:::

::: {.column width="50%"}
::: appex
**Option 2:**

Clone the corresponding application exercise repo and follow along.

{{< fa laptop >}} `ae-01-meet-the-penguins`

Go to the [course GitHub organization](https://github.com/INFO-511-F24) and clone [`ae-01-meet-the-penguins`](https://github.com/INFO-511-F24/ae-01-meet-the-penguins) to your environment.
:::
:::
:::

## Tour recap: Python + Jupyter (via VS Code)

![](images/tour-vs-code.png){fig-align="center"}

## A short list (for now) of Python essentials {.smaller}

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:

```{python}
#| eval: false

to_this.do_this()
to_that.do_that(to_this, with_those)
```

. . .

-   Packages are installed with the `pip install` function (via the terminal)...

```{bash}
pip install package_name
```

-   ... and loaded with the `import` function, once per session (usually with a shorthand "nickname"):

```{python}
#| eval: false

import package_name as pkg
```

## Python essentials (continued)

-   Columns (variables) in data frames are accessed with `['']`:

```{python}
#| eval: false

dataframe['var_name']
```

. . .

-   Object documentation can be accessed with `help()`

```{python}
#| eval: false

help(pd.Series.mean)
```

## pandas

[![](images/pandas.png){fig-alt="Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr" width="300"}](https://tidyverse.org)

[pandas.pydata.org](https://pandas.pydata.org/)

-   **Pandas** is a quintessential package designed for data analysis

# Jupyter Notebooks

## Jupyter Notebooks

::: incremental
-   Fully reproducible reports -- each time you run the analysis is ran from the beginning
-   Code goes in **code** chunks narrative goes in **markdown** chunks
-   A visual editor for a familiar / Google docs-like editing experience
:::

## Tour: Jupyter Notebooks {.smaller}

::: columns
::: {.column width="50%"}
::: demo
**Option 1:**

Sit back and enjoy the show!
:::
:::

::: {.column width="50%"}
::: appex
**Option 2:**

Clone the corresponding application exercise repo and follow along.

{{< fa laptop >}} `ae-01-meet-the-penguins`

Go to the [course GitHub organization](https://github.com/INFO-511-F24) and clone [`ae-01-meet-the-penguins`](https://github.com/INFO-511-F24/ae-01-penguins) to your environment.
:::
:::
:::

## Tour recap: Jupyter Notebooks

![](images/tour-jupyter.png){fig-alt="RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk." fig-align="center"}

## How will we use Jupyter Notebooks?

-   Every application exercise, lab, project, etc. is a Jupyter notebook
    -   However, projects will be built with Quarto Websites (more later)
-   You'll always have a template Jupyter notebook to start with
-   The amount of scaffolding in the template will decrease over the semester
