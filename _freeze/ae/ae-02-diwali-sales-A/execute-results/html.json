{
  "hash": "9635ed0a0da0d47a303e975f7a49a0d4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 02: Diwali sales + EDA'\nsubtitle: Suggested answers\ncategories:\n  - Application exercise\n  - Answers\nexecute:\n  warning: false\n  error: false\n---\n\n## Exercise 1\n\n### Reading and Examining the Data\n\n1.  **Read in the data:**\n\n    -   Read the Diwali sales data into a Pandas DataFrame and display the first few rows.\n    -   **Hint:** use `, encoding = 'iso-8859-1'` within the `pd.___()` function.\n\n::: {#cell-read-data .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Read in the data\ndiwali = pd.read_csv('data/diwali_sales_data.csv', encoding='iso-8859-1')\ndiwali.head()\n```\n\n::: {#read-data .cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User_ID</th>\n      <th>Cust_name</th>\n      <th>Product_ID</th>\n      <th>Gender</th>\n      <th>Age Group</th>\n      <th>Age</th>\n      <th>Marital_Status</th>\n      <th>State</th>\n      <th>Zone</th>\n      <th>Occupation</th>\n      <th>Product_Category</th>\n      <th>Orders</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1002903</td>\n      <td>Sanskriti</td>\n      <td>P00125942</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>28</td>\n      <td>0</td>\n      <td>Maharashtra</td>\n      <td>Western</td>\n      <td>Healthcare</td>\n      <td>Auto</td>\n      <td>1</td>\n      <td>23952.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000732</td>\n      <td>Kartik</td>\n      <td>P00110942</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>35</td>\n      <td>1</td>\n      <td>Andhra Pradesh</td>\n      <td>Southern</td>\n      <td>Govt</td>\n      <td>Auto</td>\n      <td>3</td>\n      <td>23934.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1001990</td>\n      <td>Bindu</td>\n      <td>P00118542</td>\n      <td>F</td>\n      <td>26-35</td>\n      <td>35</td>\n      <td>1</td>\n      <td>Uttar Pradesh</td>\n      <td>Central</td>\n      <td>Automobile</td>\n      <td>Auto</td>\n      <td>3</td>\n      <td>23924.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1001425</td>\n      <td>Sudevi</td>\n      <td>P00237842</td>\n      <td>M</td>\n      <td>0-17</td>\n      <td>16</td>\n      <td>0</td>\n      <td>Karnataka</td>\n      <td>Southern</td>\n      <td>Construction</td>\n      <td>Auto</td>\n      <td>2</td>\n      <td>23912.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1000588</td>\n      <td>Joni</td>\n      <td>P00057942</td>\n      <td>M</td>\n      <td>26-35</td>\n      <td>28</td>\n      <td>1</td>\n      <td>Gujarat</td>\n      <td>Western</td>\n      <td>Food Processing</td>\n      <td>Auto</td>\n      <td>2</td>\n      <td>23877.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n2.  **Examine the Data:**\n    -   Display basic information about the dataset using the `.info()` method.\n\n    -   Display summary statistics for the numerical columns using the `.describe()` method.\n\n::: {#cell-info-describe .cell execution_count=2}\n``` {.python .cell-code}\n# Examine the data\ndiwali.info()\n\n# Describe numerical columns\ndiwali.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 11251 entries, 0 to 11250\nData columns (total 13 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   User_ID           11251 non-null  int64  \n 1   Cust_name         11251 non-null  object \n 2   Product_ID        11251 non-null  object \n 3   Gender            11251 non-null  object \n 4   Age Group         11251 non-null  object \n 5   Age               11251 non-null  int64  \n 6   Marital_Status    11251 non-null  int64  \n 7   State             11251 non-null  object \n 8   Zone              11251 non-null  object \n 9   Occupation        11251 non-null  object \n 10  Product_Category  11251 non-null  object \n 11  Orders            11251 non-null  int64  \n 12  Amount            11239 non-null  float64\ndtypes: float64(1), int64(4), object(8)\nmemory usage: 1.1+ MB\n```\n:::\n\n::: {#info-describe .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User_ID</th>\n      <th>Age</th>\n      <th>Marital_Status</th>\n      <th>Orders</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.125100e+04</td>\n      <td>11251.000000</td>\n      <td>11251.000000</td>\n      <td>11251.000000</td>\n      <td>11239.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.003004e+06</td>\n      <td>35.421207</td>\n      <td>0.420318</td>\n      <td>2.489290</td>\n      <td>9453.610858</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.716125e+03</td>\n      <td>12.754122</td>\n      <td>0.493632</td>\n      <td>1.115047</td>\n      <td>5222.355869</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000001e+06</td>\n      <td>12.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>188.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.001492e+06</td>\n      <td>27.000000</td>\n      <td>0.000000</td>\n      <td>1.500000</td>\n      <td>5443.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.003065e+06</td>\n      <td>33.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>8109.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.004430e+06</td>\n      <td>43.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>12675.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.006040e+06</td>\n      <td>92.000000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>23952.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAdd narrative here...\n\n::: callout-important\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n## Exercise 2\n\n### Exploring unique levels, outliers, and missing values\n\n1.  **Exploring Unique Levels:**\n\n    -   Identify and display the unique values in each categorical column.\n\n::: {#unique-levels .cell execution_count=3}\n``` {.python .cell-code}\n# Select categorical columns\ncategorical_cols = diwali.select_dtypes(include=['object']).columns\n\n# Display unique levels for each categorical column\nfor col in categorical_cols:\n    print(f\"Unique levels in {col}: {diwali[col].unique()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique levels in Cust_name: ['Sanskriti' 'Kartik' 'Bindu' ... 'Chris' 'Madan Mohan' 'Nicole']\nUnique levels in Product_ID: ['P00125942' 'P00110942' 'P00118542' ... 'P00307142' 'P00044742'\n 'P00296942']\nUnique levels in Gender: ['F' 'M']\nUnique levels in Age Group: ['26-35' '0-17' '18-25' '55+' '46-50' '51-55' '36-45']\nUnique levels in State: ['Maharashtra' 'Andhra Pradesh' 'Uttar Pradesh' 'Karnataka' 'Gujarat'\n 'Himachal Pradesh' 'Delhi' 'Madhya Pradesh' 'Jharkhand' 'Kerala'\n 'Haryana' 'Bihar' 'Rajasthan' 'Uttarakhand' 'Telangana' 'Punjab']\nUnique levels in Zone: ['Western' 'Southern' 'Central' 'Northern' 'Eastern']\nUnique levels in Occupation: ['Healthcare' 'Govt' 'Automobile' 'Construction' 'Food Processing'\n 'Lawyer' 'IT Sector' 'Media' 'Banking' 'Retail' 'Hospitality' 'Aviation'\n 'Agriculture' 'Textile' 'Chemical']\nUnique levels in Product_Category: ['Auto' 'Hand & Power Tools' 'Stationery' 'Tupperware' 'Footwear & Shoes'\n 'Furniture' 'Food' 'Games & Toys' 'Sports Products' 'Books'\n 'Electronics & Gadgets' 'Decor' 'Clothing & Apparel' 'Beauty'\n 'Household items' 'Pet Care' 'Veterinary' 'Office']\n```\n:::\n:::\n\n\n2.  **Identifying and Visualizing Outliers:**\n\n    -   Create a box plot to visualize outliers in the 'Amount' column.\n\n    -   Identify outliers using the IQR method and count the number of outliers for each numerical column.\n\n::: {#cell-outliers .cell execution_count=4}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Boxplot to visualize outliers\nsns.boxplot(data=diwali, x='Amount')\nplt.show()\n\n# Identify outliers using the IQR method\nfor col in diwali.select_dtypes(include='number').columns:\n    q25 = diwali[col].quantile(0.25)\n    q75 = diwali[col].quantile(0.75)\n    iqr = q75 - q25\n    lower_bound = q25 - 1.5 * iqr\n    upper_bound = q75 + 1.5 * iqr\n    outliers = diwali[(diwali[col] < lower_bound) | (diwali[col] > upper_bound)]\n    print(f\"{col}: {outliers.shape[0]} outliers\")\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-02-diwali-sales-A_files/figure-html/outliers-output-1.png){#outliers width=563 height=429}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nUser_ID: 0 outliers\nAge: 283 outliers\nMarital_Status: 0 outliers\nOrders: 0 outliers\nAmount: 19 outliers\n```\n:::\n:::\n\n\n2.  **Handling Missing Values:**\n\n    -   Check for missing values in the dataset.\n\n::: {#cell-NaNs .cell execution_count=5}\n``` {.python .cell-code}\n# Check for missing values\ndiwali.isnull().sum()\n```\n\n::: {#nans .cell-output .cell-output-display execution_count=5}\n```\nUser_ID              0\nCust_name            0\nProduct_ID           0\nGender               0\nAge Group            0\nAge                  0\nMarital_Status       0\nState                0\nZone                 0\nOccupation           0\nProduct_Category     0\nOrders               0\nAmount              12\ndtype: int64\n```\n:::\n:::\n\n\nAdd narrative here...\n\n::: callout-important\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n",
    "supporting": [
      "ae-02-diwali-sales-A_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}