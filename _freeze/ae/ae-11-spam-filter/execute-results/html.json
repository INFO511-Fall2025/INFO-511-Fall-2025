{
  "hash": "fff69435688ffc06a7fe85c3982d0e09",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 11: Building a spam filter'\ncategories:\n  - Application exercise\neditor: visual\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  error: false\n---\n\nIn this application exercise, we will\n\n-   Use logistic regression to fit a model for a binary response variable\n-   Fit a logistic regression model in Python\n-   Use a logistic regression model for classification\n\nTo illustrate logistic regression, we will build a spam filter from email data.\n\nThe data come from incoming emails in David Diez's (one of the authors of OpenIntro textbooks) Gmail account for the first three months of 2012.\nAll personally identifiable information has been removed.\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nimport statsmodels.api as sm\n\nnp.random.seed(123)\n\nemail = pd.read_csv('data/email.csv')\n```\n:::\n\n\n::: {#c8c10621 .cell execution_count=2}\n``` {.python .cell-code}\nprint(email.info())\nprint(email.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3921 entries, 0 to 3920\nData columns (total 21 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   spam          3921 non-null   int64  \n 1   to_multiple   3921 non-null   int64  \n 2   from          3921 non-null   int64  \n 3   cc            3921 non-null   int64  \n 4   sent_email    3921 non-null   int64  \n 5   time          3921 non-null   object \n 6   image         3921 non-null   int64  \n 7   attach        3921 non-null   int64  \n 8   dollar        3921 non-null   int64  \n 9   winner        3921 non-null   object \n 10  inherit       3921 non-null   int64  \n 11  viagra        3921 non-null   int64  \n 12  password      3921 non-null   int64  \n 13  num_char      3921 non-null   float64\n 14  line_breaks   3921 non-null   int64  \n 15  format        3921 non-null   int64  \n 16  re_subj       3921 non-null   int64  \n 17  exclaim_subj  3921 non-null   int64  \n 18  urgent_subj   3921 non-null   int64  \n 19  exclaim_mess  3921 non-null   int64  \n 20  number        3921 non-null   object \ndtypes: float64(1), int64(17), object(3)\nmemory usage: 643.4+ KB\nNone\n              spam  to_multiple         from           cc   sent_email  \\\ncount  3921.000000  3921.000000  3921.000000  3921.000000  3921.000000   \nmean      0.093599     0.158123     0.999235     0.404489     0.277990   \nstd       0.291307     0.364903     0.027654     2.666424     0.448066   \nmin       0.000000     0.000000     0.000000     0.000000     0.000000   \n25%       0.000000     0.000000     1.000000     0.000000     0.000000   \n50%       0.000000     0.000000     1.000000     0.000000     0.000000   \n75%       0.000000     0.000000     1.000000     0.000000     1.000000   \nmax       1.000000     1.000000     1.000000    68.000000     1.000000   \n\n             image       attach       dollar      inherit       viagra  \\\ncount  3921.000000  3921.000000  3921.000000  3921.000000  3921.000000   \nmean      0.048457     0.132874     1.467228     0.038001     0.002040   \nstd       0.450848     0.718518     5.022298     0.267899     0.127759   \nmin       0.000000     0.000000     0.000000     0.000000     0.000000   \n25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n75%       0.000000     0.000000     0.000000     0.000000     0.000000   \nmax      20.000000    21.000000    64.000000     9.000000     8.000000   \n\n          password     num_char  line_breaks       format      re_subj  \\\ncount  3921.000000  3921.000000  3921.000000  3921.000000  3921.000000   \nmean      0.108136    10.706586   230.658505     0.695231     0.261413   \nstd       0.959931    14.645786   319.304959     0.460368     0.439460   \nmin       0.000000     0.001000     1.000000     0.000000     0.000000   \n25%       0.000000     1.459000    34.000000     0.000000     0.000000   \n50%       0.000000     5.856000   119.000000     1.000000     0.000000   \n75%       0.000000    14.084000   298.000000     1.000000     1.000000   \nmax      28.000000   190.087000  4022.000000     1.000000     1.000000   \n\n       exclaim_subj  urgent_subj  exclaim_mess  \ncount   3921.000000  3921.000000   3921.000000  \nmean       0.080337     0.001785      6.584290  \nstd        0.271848     0.042220     51.479871  \nmin        0.000000     0.000000      0.000000  \n25%        0.000000     0.000000      0.000000  \n50%        0.000000     0.000000      1.000000  \n75%        0.000000     0.000000      4.000000  \nmax        1.000000     1.000000   1236.000000  \n```\n:::\n:::\n\n\nThe variables we'll use in this analysis are\n\n-   `spam`: 1 if the email is spam, 0 otherwise\n-   `exclaim_mess`: The number of exclamation points in the email message\n\n**Goal:** Use the number of exclamation points in an email to predict whether or not it is spam.\n\n# Exploratory data analysis\n\nLet's start by taking a look at our data.\nCreate an density plot to investigate the relationship between `spam` and `exclaim_mess`.\nAdditionally, calculate the mean number of exclamation points for both spam and non-spam emails.\n\n::: {#2b5db50c .cell execution_count=3}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n# Linear model -- a false start\n\nSuppose we try using a linear model to describe the relationship between the number of exclamation points and whether an email is spam.\nWrite up a linear model that models spam by exclamation marks.\n\n::: {#e4e446fa .cell execution_count=4}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\nA visualization of a linear model is below.\n\n::: {#plot-linear-model .cell execution_count=5}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nplt.scatter(email['exclaim_mess'], email['spam'], alpha=0.5, c=email['spam'], cmap='viridis')\nplt.plot(email['exclaim_mess'], linear_model.predict(sm.add_constant(X)), color='black')\nplt.xlabel('Number of Exclamation Marks')\nplt.ylabel('Spam (0 or 1)')\nplt.title('Linear Model Fit')\nplt.show()\n```\n:::\n\n\n![](images/linear-spam.png){fig-align=\"center\" width=\"672\"}\n\n-   Is the linear model a good fit for the data? Why or why not?\n\n*Add response here.*\n\n# Logistic regression -- a different approach\n\nLet $p$ be the probability an email is spam (success).\n\n-   $\\frac{p}{1-p}$: odds an email is spam (if p = 0.7, then the odds are 0.7/(1 - 0.7) = 2.33)\n-   $\\log\\Big(\\frac{p}{1-p}\\Big)$: \"log-odds\", i.e., the natural log, an email is spam\n\nThe logistic regression model using the number of exclamation points as an explanatory variable is as follows:\n\n$$\\log\\Big(\\frac{p}{1-p}\\Big) = \\beta_0 + \\beta_1 \\times exclaim\\_mess$$\n\nThe probability an email is spam can be calculated as:\n\n$$p = \\frac{\\exp\\{\\beta_0 + \\beta_1 \\times exclaim\\_mess\\}}{1 + \\exp\\{\\beta_0 + \\beta_1 \\times exclaim\\_mess\\}}$$\n\n# Exercises\n\n## Exercise 1\n\n-   Fit the logistic regression model using the number of exclamation points to predict the probability an email is spam.\n\n::: {#logistic-fit .cell execution_count=6}\n``` {.python .cell-code}\nX = email[['exclaim_mess']]\ny = email['spam']\n\nlog_reg = LogisticRegression()\nlog_reg.fit(X, y)\n\n# Summary output\nprint(f\"Intercept: {log_reg.intercept_[0]}\")\nprint(f\"Coefficient: {log_reg.coef_[0][0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIntercept: -2.2723427075496767\nCoefficient: 0.00027240944041455475\n```\n:::\n:::\n\n\n-   How does the code above differ from previous code we've used to fit regression models? Compare your summary output to the estimated model below.\n\n$$\\log\\Big(\\frac{p}{1-p}\\Big) = -2.27 - 0.000272 \\times exclaim\\_mess$$\n\n*Add response here.*\n\n## Exercise 2\n\nWhat is the probability the email is spam if it contains 10 exclamation points?\nAnswer the question using the `log_reg.predict_proba()` function.\n\n::: {#pred-log-odds-2 .cell execution_count=7}\n``` {.python .cell-code}\nemail_10_exclaim = np.array([[10]])\npred_prob = log_reg.predict_proba(email_10_exclaim)[0][1]\nprint(f\"Predicted probability of spam for an email with 10 exclamation points: {pred_prob}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted probability of spam for an email with 10 exclamation points: 0.0936705855941035\n```\n:::\n:::\n\n\n## Exercise 3\n\nWe have the probability an email is spam, but ultimately we want to use the probability to classify an email as spam or not spam.\nTherefore, we need to set a **decision-making threshold**, such that an email is classified as spam if the predicted probability is greater than the threshold and not spam otherwise.\n\nSuppose you are a data scientist working on a spam filter.\nYou must determine how high the predicted probability must be before you think it would be reasonable to call it spam and put it in the junk folder (which the user is unlikely to check).\n\nWhat are some trade offs you would consider as you set the decision-making threshold?\n\n*Add response here.*\n\n::: {#8e50ae3a .cell execution_count=8}\n``` {.python .cell-code}\nemail['pred_class'] = (log_reg.predict_proba(X)[:, 1] >= 0.5).astype(int)\n\nplt.figure(figsize=(8, 6))\nsns.stripplot(data=email, x='exclaim_mess', y=email['spam'].astype(str), hue='pred_class', palette='colorblind', jitter=True, alpha=0.5)\nplt.xlabel('Number of Exclamation Marks')\nplt.ylabel('Spam (0 or 1)')\nplt.title('Logistic Regression Model Predictions with Jitter')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-11-spam-filter_files/figure-html/cell-9-output-1.png){width=651 height=523}\n:::\n:::\n\n\n## Exercise 4\n\nFit a model with **all** variables in the dataset as predictors and recreate the visualization above for this model.\n\n::: {#521da674 .cell execution_count=9}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Use model evaluation metrics from `confusion_matrix` and `classification_report` to evaluate our model.\n\n::: {#bedc2a10 .cell execution_count=10}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n",
    "supporting": [
      "ae-11-spam-filter_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}