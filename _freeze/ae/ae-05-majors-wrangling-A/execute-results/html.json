{
  "hash": "2f6198d58dec0f828716e531ff17b003",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 05: Wrangling College Majors'\nsubtitle: Suggested answers\ncategories:\n  - Application exercise\n  - Answers\nexecute:\n  warning: false\n  error: false\n---\n\n::: callout-important\nThese are suggested answers.\nThis document should be used as reference only, it's not designed to be an exhaustive key.\n:::\n\n## Goal\n\nOur ultimate goal in this application exercise is to make the following data visualization.\n\n![](images/degrees_plot_final.png){fig-align=\"center\"}\n\n## Data\n\nFor this exercise you will work with data on the proportions of Bachelor’s degrees awarded in the US between 2005 and 2015.\nThe dataset you will use is in your `data/` folder and it’s called `degrees.csv`.\n\n::: {#load-packages-data .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ninfosci = pd.read_csv(\"data/degrees.csv\")\n```\n:::\n\n\nAnd let's take a look at the data.\n\n::: {#fb9f95f3 .cell execution_count=2}\n``` {.python .cell-code}\ninfosci.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>degree</th>\n      <th>2019</th>\n      <th>2020</th>\n      <th>2021</th>\n      <th>2022</th>\n      <th>2023</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Information Science &amp; eSociety (BA)</td>\n      <td>63.0</td>\n      <td>61.0</td>\n      <td>67.0</td>\n      <td>71</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Information Science (BS)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>16</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Information (PhD)</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Library &amp; Information Science (MA)</td>\n      <td>47.0</td>\n      <td>57.0</td>\n      <td>72.0</td>\n      <td>42</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Information (MS)</td>\n      <td>8.0</td>\n      <td>10.0</td>\n      <td>13.0</td>\n      <td>5</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Pivoting\n\n-   Pivot the `degrees` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.\n\n::: {#df3f8a6d .cell execution_count=3}\n``` {.python .cell-code}\ninfosci_long = infosci.melt(id_vars='degree', var_name='year', value_name='n')\n\ninfosci_long.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30 entries, 0 to 29\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   degree  30 non-null     object \n 1   year    30 non-null     object \n 2   n       24 non-null     float64\ndtypes: float64(1), object(2)\nmemory usage: 852.0+ bytes\n```\n:::\n:::\n\n\n-   **Question:** What is the type of the `year` variable? Why? What should it be?\n\nIt's an `object` variable since the information came from the columns of the original data frame and Python cannot know that these character strings represent years.\nThe variable type should be numeric (`int64`).\n\n-   Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame.\n\n::: {#b7db92a0 .cell execution_count=4}\n``` {.python .cell-code}\ninfosci_long = infosci.melt(id_vars='degree', var_name='year', value_name='n')\ninfosci_long['year'] = pd.to_numeric(infosci_long['year'])\n\ninfosci_long.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30 entries, 0 to 29\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   degree  30 non-null     object \n 1   year    30 non-null     int64  \n 2   n       24 non-null     float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 852.0+ bytes\n```\n:::\n:::\n\n\n-   **Question:** What does an `NaN` mean in this context? *Hint:* The data come from the university registrar, and they have records on every single graduates, there shouldn't be anything \"unknown\" to them about who graduated when.\n\n`NA`s should actually be 0s.\n\n-   Add on to your pipeline that you started with pivoting and convert `NaN`s in `n` to `0`s.\n\n::: {#c3f5bd7c .cell execution_count=5}\n``` {.python .cell-code}\ninfosci_long = infosci.melt(id_vars='degree', var_name='year', value_name='n')\ninfosci_long['year'] = pd.to_numeric(infosci_long['year'])\ninfosci_long['n'] = infosci_long['n'].fillna(0)\n\ninfosci_long.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ndegree    0\nyear      0\nn         0\ndtype: int64\n```\n:::\n:::\n\n\n-   In our plot the degree types are BA, BS, MA, MS, and PhD. This information is in our dataset, in the `degree` column, but this column also has additional characters we don’t need. Create a new column called `degree_type` with levels BA, BS, MA, MS, and PhD (in this order) based on `degree`. Do this by adding on to your pipeline from earlier.\n\n::: {#fc65cc81 .cell execution_count=6}\n``` {.python .cell-code}\ninfosci_long = infosci.melt(id_vars='degree', var_name='year', value_name='n')\ninfosci_long['year'] = pd.to_numeric(infosci_long['year'])\ninfosci_long['n'] = infosci_long['n'].fillna(0)\n\ninfosci_long[['major', 'degree_type']] = infosci_long['degree'].str.split(' \\(', expand=True)\ninfosci_long['degree_type'] = infosci_long['degree_type'].str.replace('\\)', '', regex=True)\n\ndegree_order = pd.CategoricalDtype(categories=[\"BA\", \"BS\", \"MA\", \"MS\", \"PhD\"], ordered=True)\ninfosci_long['degree_type'] = infosci_long['degree_type'].astype(degree_order)\n\ninfosci_long.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>degree</th>\n      <th>year</th>\n      <th>n</th>\n      <th>major</th>\n      <th>degree_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Information Science &amp; eSociety (BA)</td>\n      <td>2019</td>\n      <td>63.0</td>\n      <td>Information Science &amp; eSociety</td>\n      <td>BA</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Information Science (BS)</td>\n      <td>2019</td>\n      <td>0.0</td>\n      <td>Information Science</td>\n      <td>BS</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Information (PhD)</td>\n      <td>2019</td>\n      <td>2.0</td>\n      <td>Information</td>\n      <td>PhD</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Library &amp; Information Science (MA)</td>\n      <td>2019</td>\n      <td>47.0</td>\n      <td>Library &amp; Information Science</td>\n      <td>MA</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Information (MS)</td>\n      <td>2019</td>\n      <td>8.0</td>\n      <td>Information</td>\n      <td>MS</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n-   Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the \"first draft\" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.\n\n::: {#bc4c4ce2 .cell execution_count=7}\n``` {.python .cell-code}\nsns.set_style(\"darkgrid\")\n\nplt.figure(figsize=(8, 6))\nsns.lineplot(data=infosci_long, x='year', y='n', hue='degree_type', ci=None, marker='o')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-05-majors-wrangling-A_files/figure-html/cell-8-output-1.png){width=656 height=501}\n:::\n:::\n\n\n-   What aspects of the plot need to be updated to go from the draft you created above to the [Goal] plot at the beginning of this application exercise.\n\n    -   x-axis scale: need to go from 2019 to 2023 in unique year values\n\n    -   line colors\n\n    -   axis labels: title, x, y\n\n    -   theme\n\n-   Update x-axis scale such that the years displayed go from 2019 to 2023 in unique years.\n    Do this by adding on to your pipeline from earlier.\n\n::: {#2fbd379a .cell execution_count=8}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.lineplot(data=infosci_long, x='year', y='n', hue='degree_type', ci=None, marker='o')\nplt.xticks(ticks=infosci_long['year'].unique(), labels=infosci_long['year'].unique())\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-05-majors-wrangling-A_files/figure-html/cell-9-output-1.png){width=656 height=501}\n:::\n:::\n\n\n-   Update line colors using the following level / color assignments.\n    Once again, do this by adding on to your pipeline from earlier.\n\n    -   BA: \"#53868B\"\n\n    -   BS: \"#7AC5CD\"\n\n    -   MA: \"#89a285\"\n\n    -   MS: \"#8B814C\"\n\n    -   PhD: \"#CDBE70\"\n\n::: {#a23b4c8f .cell execution_count=9}\n``` {.python .cell-code}\ncustom_palette = {\n    \"BA\": \"#53868B\",\n    \"BS\": \"#7AC5CD\",\n    \"MA\": \"#89a285\",\n    \"MS\": \"#8B814C\",\n    \"PhD\": \"#CDBE70\"\n}\n\nplt.figure(figsize=(8, 6))\nsns.lineplot(data=infosci_long, x='year', y='n', hue='degree_type', ci=None, marker='o')\nplt.xticks(ticks=infosci_long['year'].unique(), labels=infosci_long['year'].unique())\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-05-majors-wrangling-A_files/figure-html/cell-10-output-1.png){width=656 height=501}\n:::\n:::\n\n\n-   Update the plot labels (`title`, `x`, and `y`) and use `sns.set_style(\"white_grid\")`. Once again, do this by adding on to your pipeline from earlier.\n\n::: {#86792d7f .cell execution_count=10}\n``` {.python .cell-code}\nsns.set_style(\"whitegrid\")\n\ncustom_palette = {\n    \"BA\": \"#53868B\",\n    \"BS\": \"#7AC5CD\",\n    \"MA\": \"#89a285\",\n    \"MS\": \"#8B814C\",\n    \"PhD\": \"#CDBE70\"\n}\n\nplt.figure(figsize=(8, 6))\nsns.lineplot(data=infosci_long, x='year', y='n', hue='degree_type', ci=None, marker='o', palette=custom_palette)\nplt.title('College of Information Science degrees over the years\\nAcademic years 2019 - 2023')\nplt.xticks(ticks=infosci_long['year'].unique(), labels=infosci_long['year'].unique())\nplt.xlabel('Graduation year')\nplt.ylabel('Number of students graduating')\nplt.legend(title='Degree type')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-05-majors-wrangling-A_files/figure-html/cell-11-output-1.png){width=656 height=538}\n:::\n:::\n\n\n",
    "supporting": [
      "ae-05-majors-wrangling-A_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}