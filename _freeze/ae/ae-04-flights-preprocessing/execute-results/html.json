{
  "hash": "70e6fa00c7a58b052908d04859402659",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 04: NYC flights + data preprocessing'\ncategories:\n  - Application exercise\nexecute:\n  warning: false\n  error: false\n---\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, MaxAbsScaler, MinMaxScaler\nimport numpy as np\nfrom nycflights13 import flights\n```\n:::\n\n\n## Exercise 1 - Load data\n\nFill in the blanks:\n\n::: {#8543cc86 .cell execution_count=2}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\nThe `flights` data frame has \\_\\_ rows.\nEach row represents a \\_\\_.\n\n## Exercise 2 - Data cleaning\n\nRemove rows with missing values in the `arr_delay` and `distance` columns.\n\nWhat are the names of the variables in `flights`.\n\n::: {#remove-nans .cell execution_count=3}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 3 - Original Data Distribution\n\n-   Plot the original distributions of `arr_delay` and `distance`.\n\n::: {#original-distribution .cell execution_count=4}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 4 - Check for Skewness\n\n-   Calculate and print the skewness of `arr_delay` and `distance`.\n\n::: {#check-skewness .cell execution_count=5}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 5 - Scaling\n\n-   Check the summary statistics of `arr_delay` and `distance` to see if scaling is necessary.\n\n::: {#describe-arr_delay .cell execution_count=6}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n::: {#describe-distance .cell execution_count=7}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Question: Do `arr_delay` and `distance` need to be scaled? Why?\n\n*add response here.*\n\n-   Apply standard scaling, maximum absolute scaling, and Min-Max Scaling to the transformed `arr_delay` and `distance`.\n-   **Hint:** use the framework `df_clean.loc[:, ['arr_delay_minmax', 'distance_minmax']]` to prevent errors\n\n::: {#standardize-data .cell execution_count=8}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Question: What are the two pros and two cons of standardizing data?\n\n*Add response here.*\n\n## Exercise 6 - Transformation\n\n-   Check the summary statistics again with your min-max standardized columns.\n\n::: {#cfb158d7 .cell execution_count=9}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n::: {#62114f20 .cell execution_count=10}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Question: Why should you use the min-max scaled data instead of a different scaling for the transformations (hint: especially log transformation)\n\n*Add response here.*\n\n-   Apply a log transformation to `arr_delay` if it is positively skewed and apply a square root transformation to `distance` if it is negatively skewed (use `if` `else` statements).\n\n-   **Hint:** Logical operators in Python:\n\n    | operator      | definition                                               |\n    |:--------------|:---------------------------------------------------------|\n    | `<`           | is less than?                                            |\n    | `<=`          | is less than or equal to?                                |\n    | `>`           | is greater than?                                         |\n    | `>=`          | is greater than or equal to?                             |\n    | `==`          | is exactly equal to?                                     |\n    | `!=`          | is not equal to?                                         |\n    | `x and y`     | is x AND y?                                              |\n    | `x or y`      | is x OR y?                                               |\n    | `pd.isna(x)`  | is x NA?                                                 |\n    | `~pd.isna(x)` | is x not NA?                                             |\n    | `x in y`      | is x in y?                                               |\n    | `x not in y`  | is x not in y?                                           |\n    | `not x`       | is not x? (only makes sense if `x` is `True` or `False`) |\n\n::: {#transform-data .cell execution_count=11}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Question: Why do we have to add a constant when we perform a log or square-root transformation (i.e., `np.log1p(df['column' + 1])`)?\n\n*add response here.*\n\n",
    "supporting": [
      "ae-04-flights-preprocessing_files"
    ],
    "filters": [],
    "includes": {}
  }
}