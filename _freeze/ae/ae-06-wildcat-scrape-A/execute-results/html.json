{
  "hash": "4d35eb6ef7f5a06a858e7a0d11b1fa6c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 06: Opinion articles in The Arizona Daily Wildcat'\nsubtitle: Suggested answers\ncategories:\n  - Application exercise\n  - Answers\nexecute:\n  warning: false\n  error: false\n---\n\n::: callout-important\nThese are suggested answers.\nThis document should be used as reference only, it's not designed to be an exhaustive key.\n:::\n\n## Part 1 - Data scraping\n\nSee [wildcat-scrape.py](https://github.com/INFO-511-F24/info-511-f24/blob/main/slides/08-web-scraping/wildcat-scrape.py) for suggested scraping code.\n\n## Part 2 - Data analysis\n\nLet's start by loading the packages we will need:\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n```\n:::\n\n\n-   Load the data you saved into the `data` folder and name it `wildcat`.\n\n::: {#load-data .cell message='false' execution_count=2}\n``` {.python .cell-code}\nwildcat = pd.read_csv(\"data/wildcat.csv\")\n```\n:::\n\n\n-   Who are the most prolific authors of the 100 most recent opinion articles in The Arizona Daily Wildcat?\n\n::: {#union-title-abstract .cell execution_count=3}\n``` {.python .cell-code}\nauthor_counts = wildcat['author'].value_counts().reset_index()\nauthor_counts.columns = ['author', 'count']\nprint(author_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               author  count\n0         Greg Castro     35\n1       Toni Marcheva     31\n2    Apoorva Bhaskara     28\n3          Alec Scott     26\n4          Sean Fagan     24\n..                ...    ...\n183       Jack Cooper      1\n184         Amit Syal      1\n185     Quinn McVeigh      1\n186         Eric Wise      1\n187  Gabriel Schivone      1\n\n[188 rows x 2 columns]\n```\n:::\n:::\n\n\n-   Draw a line plot of the number of opinion articles published per day in The Arizona Daily Wildcat.\n\n::: {#cell-articles-per-day .cell execution_count=4}\n``` {.python .cell-code}\nwildcat['date'] = pd.to_datetime(wildcat['date'])\n\narticles_per_day = wildcat['date'].value_counts().sort_index().reset_index()\narticles_per_day.columns = ['date', 'count']\n\nplt.figure(figsize=(8, 6))\nsns.lineplot(data=articles_per_day, x='date', y='count', marker='o')\nplt.title('Number of Opinion Articles Published Per Day')\nplt.xlabel('Date')\nplt.ylabel('Number of Articles')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-06-wildcat-scrape-A_files/figure-html/articles-per-day-output-1.png){#articles-per-day width=688 height=523}\n:::\n:::\n\n\n-   What percent of the most recent 100 opinion articles in The Arizona Daily Wildcat mention \"climate\" in their title?\n\n::: {#climate-title .cell execution_count=5}\n``` {.python .cell-code}\nmost_recent_100 = wildcat.head(100)\n\nmost_recent_100['title_lower'] = most_recent_100['title'].str.lower()\nmost_recent_100['climate_mentioned'] = most_recent_100['title_lower'].apply(lambda x: 'mentioned' if 'climate' in x else 'not mentioned')\n\nclimate_mentions = most_recent_100['climate_mentioned'].value_counts(normalize=True).reset_index()\nclimate_mentions.columns = ['climate_mentioned', 'percentage']\nprint(climate_mentions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  climate_mentioned  percentage\n0     not mentioned        0.99\n1         mentioned        0.01\n```\n:::\n:::\n\n\n-   What percent of the most recent 100 opinion articles in The Arizona Daily Wildcat mention \"election\" in their title or abstract?\n\n::: {#election-title .cell execution_count=6}\n``` {.python .cell-code}\nmost_recent_100 = wildcat.head(100)\n\nmost_recent_100['title_lower'] = most_recent_100['title'].str.lower()\nmost_recent_100['election_mentioned'] = most_recent_100['title_lower'].apply(lambda x: 'mentioned' if 'election' in x else 'not mentioned')\n\nclimate_mentions = most_recent_100['election_mentioned'].value_counts(normalize=True).reset_index()\nclimate_mentions.columns = ['election_mentioned', 'percentage']\nprint(climate_mentions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  election_mentioned  percentage\n0      not mentioned         1.0\n```\n:::\n:::\n\n\n-   What are the most common words in the titles of the 100 most recent articles?\n\n::: {#a20387eb .cell execution_count=7}\n``` {.python .cell-code}\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom collections import Counter\nimport nltk\n\nnltk.download('stopwords')\nnltk.download('punkt')\n\nstop_words = set(stopwords.words('english'))\n\nmost_recent_100['tokens'] = most_recent_100['title_lower'].apply(lambda x: [word for word in word_tokenize(x) if word.isalpha() and word not in stop_words])\n\n# Count the frequency of each word\nword_freq = Counter([word for tokens in most_recent_100['tokens'] for word in tokens])\n\n# Convert to DataFrame and plot\nword_freq_df = pd.DataFrame(word_freq.most_common(20), columns=['word', 'count'])\n\nplt.figure(figsize=(8, 6))\nsns.barplot(data=word_freq_df, x='count', y='word', palette='viridis')\nplt.title('Most Common Words in Titles of 100 Most Recent Articles')\nplt.xlabel('Count')\nplt.ylabel('Word')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-06-wildcat-scrape-A_files/figure-html/cell-8-output-1.png){width=708 height=523}\n:::\n:::\n\n\n-   Time permitting:\n\n",
    "supporting": [
      "ae-06-wildcat-scrape-A_files"
    ],
    "filters": [],
    "includes": {}
  }
}