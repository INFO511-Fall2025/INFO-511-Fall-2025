{
  "hash": "352761c761f908e42817c15003ce1057",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Exploratory data analysis\nsubtitle: Lecture 4\nformat:\n  revealjs: default\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  message: false\n---\n\n## Setup\n\n::: {#setup .cell message='false' execution_count=1}\n``` {.python .cell-code}\n# Import all required libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nfrom scipy.stats import skewnorm\nfrom scipy.stats import kurtosis, norm\nfrom scipy.stats import gamma\nimport missingno as msno\nimport random\nimport statsmodels.api as sm\n\n# Load in UK Smoking Data\nbirths14 = pd.read_csv(\"data/births14.csv\")\n\n# Set seed\nrandom.seed(123)\n```\n:::\n\n\n# Exploratory Data Analysis\n\n## What is exploratory data analysis? {.smaller}\n\n> Exploratory Data Analysis is a statistical approach to analyzing datasets to summarize their main characteristics, often using visual methods.\n\n## Examining data {.smaller}\n\n::: panel-tabset\n## Head\n\n::: {#4c8f67d9 .cell execution_count=2}\n``` {.python .cell-code}\nbirths14.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fage</th>\n      <th>mage</th>\n      <th>mature</th>\n      <th>weeks</th>\n      <th>premie</th>\n      <th>visits</th>\n      <th>gained</th>\n      <th>weight</th>\n      <th>lowbirthweight</th>\n      <th>sex</th>\n      <th>habit</th>\n      <th>marital</th>\n      <th>whitemom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>34.0</td>\n      <td>34</td>\n      <td>younger mom</td>\n      <td>37</td>\n      <td>full term</td>\n      <td>14.0</td>\n      <td>28.0</td>\n      <td>6.96</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>36.0</td>\n      <td>31</td>\n      <td>younger mom</td>\n      <td>41</td>\n      <td>full term</td>\n      <td>12.0</td>\n      <td>41.0</td>\n      <td>8.86</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>37.0</td>\n      <td>36</td>\n      <td>mature mom</td>\n      <td>37</td>\n      <td>full term</td>\n      <td>10.0</td>\n      <td>28.0</td>\n      <td>7.51</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>not white</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>16</td>\n      <td>younger mom</td>\n      <td>38</td>\n      <td>full term</td>\n      <td>NaN</td>\n      <td>29.0</td>\n      <td>6.19</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>not married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32.0</td>\n      <td>31</td>\n      <td>younger mom</td>\n      <td>36</td>\n      <td>premie</td>\n      <td>12.0</td>\n      <td>48.0</td>\n      <td>6.75</td>\n      <td>not low</td>\n      <td>female</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Info\n\n::: {#917aef63 .cell execution_count=3}\n``` {.python .cell-code}\nbirths14.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 13 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   fage            886 non-null    float64\n 1   mage            1000 non-null   int64  \n 2   mature          1000 non-null   object \n 3   weeks           1000 non-null   int64  \n 4   premie          1000 non-null   object \n 5   visits          944 non-null    float64\n 6   gained          958 non-null    float64\n 7   weight          1000 non-null   float64\n 8   lowbirthweight  1000 non-null   object \n 9   sex             1000 non-null   object \n 10  habit           981 non-null    object \n 11  marital         1000 non-null   object \n 12  whitemom        1000 non-null   object \ndtypes: float64(4), int64(2), object(7)\nmemory usage: 101.7+ KB\n```\n:::\n:::\n\n\n## Describe\n\n::: {#d089b6d3 .cell execution_count=4}\n``` {.python .cell-code}\nbirths14.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fage</th>\n      <th>mage</th>\n      <th>weeks</th>\n      <th>visits</th>\n      <th>gained</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>886.000000</td>\n      <td>1000.000000</td>\n      <td>1000.000000</td>\n      <td>944.000000</td>\n      <td>958.000000</td>\n      <td>1000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>31.133183</td>\n      <td>28.449000</td>\n      <td>38.666000</td>\n      <td>11.351695</td>\n      <td>30.425887</td>\n      <td>7.198160</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.058135</td>\n      <td>5.759737</td>\n      <td>2.564961</td>\n      <td>4.108192</td>\n      <td>15.242527</td>\n      <td>1.306775</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>15.000000</td>\n      <td>14.000000</td>\n      <td>21.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.750000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>26.000000</td>\n      <td>24.000000</td>\n      <td>38.000000</td>\n      <td>9.000000</td>\n      <td>20.000000</td>\n      <td>6.545000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>31.000000</td>\n      <td>28.000000</td>\n      <td>39.000000</td>\n      <td>12.000000</td>\n      <td>30.000000</td>\n      <td>7.310000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>35.000000</td>\n      <td>33.000000</td>\n      <td>40.000000</td>\n      <td>14.000000</td>\n      <td>38.000000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>85.000000</td>\n      <td>47.000000</td>\n      <td>46.000000</td>\n      <td>30.000000</td>\n      <td>98.000000</td>\n      <td>10.620000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n## Visualizing data relationships {.smaller}\n\n::: {#36b6db01 .cell execution_count=5}\n``` {.python .cell-code}\nsns.pairplot(births14[['fage', 'mage', 'weeks', 'mature']], hue='mature', height=2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-6-output-1.png){width=717 height=570}\n:::\n:::\n\n\n## Group descriptive statistics {.smaller}\n\n::: {#fb1344d4 .cell execution_count=6}\n``` {.python .cell-code}\n# Example with the premie column\nbirths14.groupby('premie').describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">fage</th>\n      <th colspan=\"2\" halign=\"left\">mage</th>\n      <th>...</th>\n      <th colspan=\"2\" halign=\"left\">gained</th>\n      <th colspan=\"8\" halign=\"left\">weight</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>premie</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>full term</th>\n      <td>775.0</td>\n      <td>30.967742</td>\n      <td>6.681591</td>\n      <td>15.0</td>\n      <td>26.0</td>\n      <td>31.0</td>\n      <td>35.0</td>\n      <td>49.0</td>\n      <td>876.0</td>\n      <td>28.329909</td>\n      <td>...</td>\n      <td>38.0</td>\n      <td>98.0</td>\n      <td>876.0</td>\n      <td>7.434178</td>\n      <td>1.021699</td>\n      <td>3.93</td>\n      <td>6.77</td>\n      <td>7.44</td>\n      <td>8.0825</td>\n      <td>10.62</td>\n    </tr>\n    <tr>\n      <th>premie</th>\n      <td>111.0</td>\n      <td>32.288288</td>\n      <td>9.226826</td>\n      <td>15.0</td>\n      <td>27.0</td>\n      <td>32.0</td>\n      <td>36.0</td>\n      <td>85.0</td>\n      <td>124.0</td>\n      <td>29.290323</td>\n      <td>...</td>\n      <td>41.0</td>\n      <td>85.0</td>\n      <td>124.0</td>\n      <td>5.530806</td>\n      <td>1.801182</td>\n      <td>0.75</td>\n      <td>4.50</td>\n      <td>5.75</td>\n      <td>6.5725</td>\n      <td>9.25</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 48 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Outliers {.smaller}\n\nOutliers are data points that are significantly different from others.\nIdentifying and handling outliers is important in data analysis.\n\n![](images/outliers.png){fig-align=\"center\" width=\"877\"}\n\n::: fragment\n> Outliers = 1.5 \\* Interquartile range\n:::\n\n## Assess outliers visually {.smaller}\n\n::: {#0f3a0174 .cell execution_count=7}\n``` {.python .cell-code}\nsns.boxplot(data = births14, x = 'weight', width = 0.20)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-8-output-1.png){width=768 height=429 fig-align='center'}\n:::\n:::\n\n\n## Find outliers {.smaller}\n\n::: panel-tabset\n## Output\n\n::: {#581520ba .cell execution_count=8}\n\n::: {.cell-output .cell-output-stdout}\n```\nfage: 7 outliers\nmage: 1 outliers\nweeks: 72 outliers\nvisits: 30 outliers\ngained: 26 outliers\nweight: 32 outliers\n```\n:::\n:::\n\n\n## Code\n\n::: {#6744cff8 .cell execution_count=9}\n``` {.python .cell-code}\nfor column in births14.select_dtypes(include=np.number).columns:\n    q25 = births14[column].quantile(0.25)\n    q75 = births14[column].quantile(0.75)\n    iqr = q75 - q25\n    lower_bound = q25 - 1.5 * iqr\n    upper_bound = q75 + 1.5 * iqr\n    outliers = births14[(births14[column] < lower_bound) | (births14[column] > upper_bound)]\n    print(f\"{column}: {outliers.shape[0]} outliers\")\n```\n:::\n\n\n:::\n\n::: fragment\n-   `q25`: 1/4 quartile, 25th percentile; `q75`: 3/4 quartile, 75th percentile\n\n-   `IQR`: interquartile range, $IQR = q75-q25$\n\n-   `lower`; `upper`: lower, upper limit of $1.5\\times IQR$ used to calculate outliers\n:::\n\n## Remove outliers {.smaller}\n\n::: panel-tabset\n## Cleaning\n\n::: {#4db671df .cell execution_count=10}\n``` {.python .cell-code code-line-numbers=\"1-14|2|4|6,7,8|10,11|13\"}\n# Select numerical columns\nnumerical_cols = births14.select_dtypes(include = ['number']).columns\n\nfor col in numerical_cols:\n    # Find Q1, Q3, and interquartile range (IQR) for each column\n    Q1 = births14[col].quantile(0.25)\n    Q3 = births14[col].quantile(0.75)\n    IQR = Q3 - Q1\n    # Upper and lower bounds for each column\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    # Filter out the outliers from the DataFrame\n    births14_clean = births14[(births14[col] >= lower_bound) & (births14[col] <= upper_bound)]\n```\n:::\n\n\n## Plot\n\n::: {#7fd5cb7f .cell execution_count=11}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-12-output-1.png){width=768 height=429 fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: fragment\n#### Why are there still outliers?\n:::\n\n## Missing values (`NaN`)\n\n::: {#7c1a4ca0 .cell execution_count=12}\n``` {.python .cell-code}\n# Count missing values in each column\nbirths14.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nfage              114\nmage                0\nmature              0\nweeks               0\npremie              0\nvisits             56\ngained             42\nweight              0\nlowbirthweight      0\nsex                 0\nhabit              19\nmarital             0\nwhitemom            0\ndtype: int64\n```\n:::\n:::\n\n\n## Visualizing (`NaN`) {.smaller}\n\nWe can use the `missingno` library to visualize missing data.\n\n::: {#399ca807 .cell execution_count=13}\n``` {.python .cell-code}\nmsno.bar(births14, figsize = (7, 5), fontsize = 10)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-14-output-1.png){width=614 height=520 fig-align='center'}\n:::\n:::\n\n\n## Describe categorical variables {.smaller}\n\n::: panel-tabset\n## Describe\n\n::: {#03b12da8 .cell execution_count=14}\n``` {.python .cell-code}\nbirths14.describe(exclude = [np.number])\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mature</th>\n      <th>premie</th>\n      <th>lowbirthweight</th>\n      <th>sex</th>\n      <th>habit</th>\n      <th>marital</th>\n      <th>whitemom</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1000</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>981</td>\n      <td>1000</td>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>younger mom</td>\n      <td>full term</td>\n      <td>not low</td>\n      <td>male</td>\n      <td>nonsmoker</td>\n      <td>married</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>841</td>\n      <td>876</td>\n      <td>919</td>\n      <td>505</td>\n      <td>867</td>\n      <td>594</td>\n      <td>765</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Unique levels\n\n::: {#9ccf4c02 .cell execution_count=15}\n\n::: {.cell-output .cell-output-stdout}\n```\nmature: ['younger mom' 'mature mom']\npremie: ['full term' 'premie']\nlowbirthweight: ['not low' 'low']\nsex: ['male' 'female']\nhabit: ['nonsmoker' 'smoker' nan]\nmarital: ['married' 'not married']\nwhitemom: ['white' 'not white']\n```\n:::\n:::\n\n\n## Code\n\n::: {#ac018538 .cell execution_count=16}\n``` {.python .cell-code code-line-numbers=\"|1|2\"}\nfor column in births14.select_dtypes(include=['object', 'category']).columns:\n    print(f\"{column}: {births14[column].unique()}\")\n```\n:::\n\n\n:::\n\n# Normality check\n\n::: fragment\nChecking if the data follows a normal distribution is a common step in EDA.\n:::\n\n## Normality check {.smaller}\n\n::: {#c9b15987 .cell execution_count=17}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-18-output-1.png){width=527 height=316 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   **Histogram**: bell-shaped curve\n\n-   **Skewness**: Close to 0 for symmetry; **Kurtosis**: Close to 3 for normal \"tailedness.\"\n\n-   **Sample Size**: Larger samples are less sensitive to non-normality.\n\n-   **Empirical Rule**: 68-95-99.7% rule (1, 2, and 3 st dev. of the mean).\n:::\n:::\n\n## Skewness {.smaller}\n\n::: {#269c1522 .cell execution_count=18}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-19-output-1.png){width=961 height=391 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   Several definitions\n-   Sensitive to outliers\n-   Designed for one peak (*unimodal*)\n:::\n:::\n\n## Kurtosis {.smaller}\n\n::: {#f47e1245 .cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-20-output-1.png){width=825 height=442 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n::: incremental\n-   Sensitive to outliers\n-   Designed for one peak (*unimodal*)\n:::\n:::\n\n## Q-Q plot {.smaller}\n\n\n\n::: panel-tabset\n## Normal\n\n::: {#d4d77bae .cell fig.asp='0.618' fig.width='10' execution_count=21}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-22-output-1.png){width=820 height=442 fig-align='center'}\n:::\n:::\n\n\n## Negative skew\n\n::: {#3ba01617 .cell fig.asp='0.618' fig.width='10' execution_count=22}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-23-output-1.png){width=836 height=442 fig-align='center'}\n:::\n:::\n\n\n## Positive skew\n\n::: {#6dc844fa .cell fig.asp='0.618' fig.width='10' execution_count=23}\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-24-output-1.png){width=836 height=442 fig-align='center'}\n:::\n:::\n\n\n:::\n\n## Testing normality: data shape {.smaller}\n\n::: {#0a4489cb .cell execution_count=24}\n``` {.python .cell-code code-fold=\"true\" code-line-numbers=\"1-24|2,5|8|11|14|17,18|21-24\"}\n# Make a copy of the data \ndataCopy = births14.copy()\n\n# Remove NAs\ndataCopyFin = dataCopy.dropna()\n\n# Q-Q plot\nsm.qqplot(dataCopyFin.weight, line='s')\nplt.title('Newborn Weight Q-Q plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04-eda_files/figure-revealjs/cell-25-output-1.png){width=820 height=464 fig-align='center'}\n:::\n:::\n\n\n::: fragment\n**Negative-skew (left-tailed)**\n:::\n\n## Conclusions\n\n::: incremental\n-   Always inspect your data first.\n\n-   Visualize relationships and distributions.\n\n-   Identify and handle outliers and missing values.\n\n-   Check for normality and understand the distribution of your data.\n:::\n\n# We will add to this!\n\n",
    "supporting": [
      "04-eda_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}