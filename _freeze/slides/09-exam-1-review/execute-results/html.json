{
  "hash": "3c0c9c1f2bb2afc586e1663e8c0f5d09",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Exam 1 review\nsubtitle: Lecture 9\nformat:\n  revealjs: default\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  error: false\n---\n\n## Setup\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\", font_scale=1.2)\n```\n:::\n\n\n# Type coercion\n\n## Explicit vs. implicit type coercion\n\n-   Explicit type coercion: You ask Python to change the type of a variable\n\n-   Implicit type coercion: Python changes / makes assumptions for you about the type of a variable without you asking for it\n\n    -   This happens because in a series, you can't have multiple types of values\n\n## Vectors {.smaller}\n\n::: incremental\n-   A vector is a collection of values\n\n    -   Atomic vectors can only contain values of the same type\n\n    -   Lists can contain values of different types\n\n-   Why do we care?\n    Because each column of a data frame is a vector.\n:::\n\n. . .\n\n::: {#ad47cbea .cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"|2|3|4\"}\ndf = pd.DataFrame({\n    'x': [1, 2, 3],          # numeric (int)\n    'y': ['a', 'b', 'c'],    # character\n    'z': [True, False, True] # boolean\n})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Explicit coercion\n\n✅ From numeric to character\n\n::: {#5fc8e0e5 .cell execution_count=3}\n``` {.python .cell-code}\ndf['x_new'] = df['x'].astype(str)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>x_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>True</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>False</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>True</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Explicit coercion\n\n❌ From character to numeric\n\n::: {#41775292 .cell execution_count=4}\n``` {.python .cell-code}\ndf['y_new'] = pd.to_numeric(df['y'], errors='coerce')\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>x_new</th>\n      <th>y_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>True</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>False</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>c</td>\n      <td>True</td>\n      <td>3</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Implicit coercion {.smaller}\n\n::: question\nWhich of the column types were implicitly coerced?\n:::\n\n::: {#811da3a2 .cell execution_count=5}\n``` {.python .cell-code code-line-numbers=\"|2|3\"}\ndf = pd.DataFrame({\n    'w': [1, 2, 3],\n    'x': ['a', 'b', 4],\n    'y': ['c', 'd', np.nan],\n    'z': [5, 6, np.nan],\n})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>w</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>c</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>d</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Collecting data {.smaller}\n\n::: question\nSuppose you conduct a survey and ask students their student ID number and number of credits they're taking this semester.\nWhat is the type of each variable?\n:::\n\n. . .\n\n::: {#220a2ae1 .cell execution_count=6}\n``` {.python .cell-code code-line-numbers=\"|2|3\"}\nsurvey_raw = pd.DataFrame({\n    'student_id': [273674, 298765, 287129, \"I don't remember\"],\n    'n_credits': [4, 4.5, \"I'm not sure yet\", \"2 - underloading\"]\n})\nsurvey_raw\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>n_credits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>273674</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>298765</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>287129</td>\n      <td>I'm not sure yet</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>I don't remember</td>\n      <td>2 - underloading</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Cleaning data {.smaller}\n\n::: {#e3cb3f8a .cell execution_count=7}\n``` {.python .cell-code code-line-numbers=\"2|3-6\"}\nsurvey = survey_raw.copy()\nsurvey['student_id'] = survey['student_id'].replace(\"I don't remember\", np.nan)\nsurvey['n_credits'] = survey['n_credits'].replace({\n    \"I'm not sure yet\": np.nan,\n    \"2 - underloading\": \"2\"\n})\nsurvey['n_credits'] = pd.to_numeric(survey['n_credits'])\nsurvey\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>n_credits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>273674.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>298765.0</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>287129.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Cleaning data -- alternative {.smaller}\n\n::: {#576c4df4 .cell execution_count=8}\n``` {.python .cell-code code-line-numbers=\"|2|3\"}\nsurvey = survey_raw.copy()\nsurvey['student_id'] = pd.to_numeric(survey['student_id'], errors='coerce')\nsurvey['n_credits'] = pd.to_numeric(survey['n_credits'], errors='coerce')\nsurvey\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>n_credits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>273674.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>298765.0</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>287129.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Recap: Type coercion {.smaller}\n\n::: incremental\n-   If variables in a DataFrame have multiple types of values, Python will coerce them into a single type, which may or may not be what you want.\n\n-   If what Python does by default is not what you want, you can use explicit coercion functions like `pd.to_numeric()`, `astype()`, etc., to turn them into the types you want them to be, which will generally also involve cleaning up the features of the data that caused the unwanted implicit coercion in the first place.\n:::\n\n# Aesthetic mappings\n\n## `loan50` example DataFrame\n\n::: {#7285c322 .cell execution_count=9}\n``` {.python .cell-code}\nloan50 = pd.read_csv(\"data/loan50.csv\")\nloan50.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>emp_length</th>\n      <th>term</th>\n      <th>homeownership</th>\n      <th>annual_income</th>\n      <th>verified_income</th>\n      <th>debt_to_income</th>\n      <th>total_credit_limit</th>\n      <th>total_credit_utilized</th>\n      <th>num_cc_carrying_balance</th>\n      <th>loan_purpose</th>\n      <th>loan_amount</th>\n      <th>grade</th>\n      <th>interest_rate</th>\n      <th>public_record_bankrupt</th>\n      <th>loan_status</th>\n      <th>has_second_income</th>\n      <th>total_income</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NJ</td>\n      <td>3.0</td>\n      <td>60</td>\n      <td>rent</td>\n      <td>59000.0</td>\n      <td>Not Verified</td>\n      <td>0.557525</td>\n      <td>95131</td>\n      <td>32894</td>\n      <td>8</td>\n      <td>debt_consolidation</td>\n      <td>22000</td>\n      <td>B</td>\n      <td>10.90</td>\n      <td>0</td>\n      <td>Current</td>\n      <td>False</td>\n      <td>59000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CA</td>\n      <td>10.0</td>\n      <td>36</td>\n      <td>rent</td>\n      <td>60000.0</td>\n      <td>Not Verified</td>\n      <td>1.305683</td>\n      <td>51929</td>\n      <td>78341</td>\n      <td>2</td>\n      <td>credit_card</td>\n      <td>6000</td>\n      <td>B</td>\n      <td>9.92</td>\n      <td>1</td>\n      <td>Current</td>\n      <td>False</td>\n      <td>60000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SC</td>\n      <td>NaN</td>\n      <td>36</td>\n      <td>mortgage</td>\n      <td>75000.0</td>\n      <td>Verified</td>\n      <td>1.056280</td>\n      <td>301373</td>\n      <td>79221</td>\n      <td>14</td>\n      <td>debt_consolidation</td>\n      <td>25000</td>\n      <td>E</td>\n      <td>26.30</td>\n      <td>0</td>\n      <td>Current</td>\n      <td>False</td>\n      <td>75000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CA</td>\n      <td>0.0</td>\n      <td>36</td>\n      <td>rent</td>\n      <td>75000.0</td>\n      <td>Not Verified</td>\n      <td>0.574347</td>\n      <td>59890</td>\n      <td>43076</td>\n      <td>10</td>\n      <td>credit_card</td>\n      <td>6000</td>\n      <td>B</td>\n      <td>9.92</td>\n      <td>0</td>\n      <td>Current</td>\n      <td>False</td>\n      <td>75000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OH</td>\n      <td>4.0</td>\n      <td>60</td>\n      <td>mortgage</td>\n      <td>254000.0</td>\n      <td>Not Verified</td>\n      <td>0.238150</td>\n      <td>422619</td>\n      <td>60490</td>\n      <td>2</td>\n      <td>home_improvement</td>\n      <td>25000</td>\n      <td>B</td>\n      <td>9.43</td>\n      <td>0</td>\n      <td>Current</td>\n      <td>False</td>\n      <td>254000.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Aesthetic mappings\n\n::: question\nWhat will the following code result in?\n:::\n\n::: {#mapping .cell execution_count=10}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', style='homeownership', palette='colorblind')\nplt.show()\n```\n:::\n\n\n## Aesthetic mappings {.smaller}\n\n::: {#cell-mapping-show .cell execution_count=11}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', style='homeownership', palette='colorblind')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/mapping-show-output-1.png){#mapping-show width=669 height=514}\n:::\n:::\n\n\n## Multiple plot layers\n\n::: question\nWhat will the following code result in?\n:::\n\n::: {#multi-plot .cell execution_count=12}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', style='homeownership', palette='colorblind')\nsns.lineplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', legend=False, palette='colorblind')\nplt.show()\n```\n:::\n\n\n## Multiple plot layers {.smaller}\n\n::: {#cell-multi-plot-show .cell execution_count=13}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', style='homeownership', palette='colorblind')\nsns.lineplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', legend=False, palette='colorblind')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/multi-plot-show-output-1.png){#multi-plot-show width=669 height=514}\n:::\n:::\n\n\n## Mapping vs. setting\n\n::: question\nWhat will the following code result in?\n:::\n\n::: {#mapping-setting .cell execution_count=14}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', palette='colorblind')\nsns.lineplot(data=loan50, x='annual_income', y='interest_rate', color='red', legend=False)\nplt.show()\n```\n:::\n\n\n## Mapping vs. setting {.smaller}\n\n::: {#cell-mapping-setting-show .cell execution_count=15}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', palette='colorblind')\nsns.lineplot(data=loan50, x='annual_income', y='interest_rate', color='red', legend=False)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/mapping-setting-show-output-1.png){#mapping-setting-show width=669 height=514}\n:::\n:::\n\n\n## Recap: Aesthetic mappings\n\n::: incremental\n-   Aesthetic *mapping* defined at the local level will be used only by the elements they're defined for.\n\n-   *Setting* colors produces a manual color aesthetic, while *mapping* assigns colors automatically based on the qualifier.\n:::\n\n## Aside: Legends {.smaller}\n\n::: {#cell-legends-plot .cell execution_count=16}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=loan50, x='annual_income', y='interest_rate', hue='homeownership', style='homeownership')\nplt.legend(title='Home ownership')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/legends-plot-output-1.png){#legends-plot width=669 height=514}\n:::\n:::\n\n\n# Categories\n\n## Categorical\n\n-   Categorical variables — variables that have a fixed and known set of possible values — are used in the **pandas** library.\n\n<!-- -->\n\n-   They are also useful when you want to display character vectors in a non-alphabetical order.\n\n::: aside\n**pandas**: <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>\n:::\n\n## Bar plot\n\n::: {#a41041eb .cell execution_count=17}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nsns.countplot(data=loan50, x='homeownership')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/cell-18-output-1.png){width=669 height=514}\n:::\n:::\n\n\n## Bar plot - reordered {.smaller}\n\n::: {#f9e27443 .cell execution_count=18}\n``` {.python .cell-code}\nloan50['homeownership'] = pd.Categorical(loan50['homeownership'], categories=['mortgage', 'rent', 'own'])\nplt.figure(figsize=(8, 6))\nsns.countplot(data=loan50, x='homeownership')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](09-exam-1-review_files/figure-revealjs/cell-19-output-1.png){width=669 height=514}\n:::\n:::\n\n\n## Frequency table\n\n::: {#6cd20b78 .cell execution_count=19}\n``` {.python .cell-code}\nloan50['homeownership'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nhomeownership\nmortgage    26\nrent        21\nown          3\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## Under the hood\n\n::: {#42be0f90 .cell execution_count=20}\n``` {.python .cell-code}\nprint(type(loan50['homeownership']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n:::\n\n\n. . .\n\n::: {#dd345839 .cell execution_count=21}\n``` {.python .cell-code}\nprint(loan50['homeownership'].dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncategory\n```\n:::\n:::\n\n\n. . .\n\n::: {#2315a85b .cell execution_count=22}\n``` {.python .cell-code}\nprint(loan50['homeownership'].cat.categories)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['mortgage', 'rent', 'own'], dtype='object')\n```\n:::\n:::\n\n\n. . .\n\n::: {#0349d52e .cell execution_count=23}\n``` {.python .cell-code}\nprint(loan50['homeownership'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0         rent\n1         rent\n2     mortgage\n3         rent\n4     mortgage\n5     mortgage\n6         rent\n7     mortgage\n8         rent\n9     mortgage\n10        rent\n11    mortgage\n12        rent\n13    mortgage\n14        rent\n15    mortgage\n16        rent\n17        rent\n18        rent\n19    mortgage\n20    mortgage\n21    mortgage\n22    mortgage\n23        rent\n24    mortgage\n25        rent\n26    mortgage\n27         own\n28    mortgage\n29    mortgage\n30        rent\n31    mortgage\n32    mortgage\n33        rent\n34        rent\n35         own\n36    mortgage\n37        rent\n38    mortgage\n39        rent\n40    mortgage\n41        rent\n42        rent\n43    mortgage\n44    mortgage\n45    mortgage\n46    mortgage\n47        rent\n48         own\n49    mortgage\nName: homeownership, dtype: category\nCategories (3, object): ['mortgage', 'rent', 'own']\n```\n:::\n:::\n\n\n## Recap: Categorical\n\n::: incremental\n-   The `pandas.Categorical` type is useful for dealing with categorical data and their levels.\n\n-   Factors and the order of their levels are relevant for displays (tables, plots) and they'll be relevant for modeling (later in the course).\n\n-   `Categorical` is a data **class** in **pandas**.\n:::\n\n## Aside: `==`\n\n::: {#5b334af7 .cell execution_count=24}\n``` {.python .cell-code}\nloan50['homeownership_new'] = loan50['homeownership'].apply(lambda x: \"don't own\" if x == 'rent' else x)\nloan50[['homeownership', 'homeownership_new']].drop_duplicates()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>homeownership</th>\n      <th>homeownership_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>rent</td>\n      <td>don't own</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>mortgage</td>\n      <td>mortgage</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>own</td>\n      <td>own</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Aside: Filtering\n\n::: {#42cab150 .cell execution_count=25}\n``` {.python .cell-code}\nloan50['homeownership_new'] = loan50['homeownership'].apply(lambda x: \"don't own\" if x in ['rent', 'mortgage'] else x)\nloan50[['homeownership', 'homeownership_new']].drop_duplicates()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>homeownership</th>\n      <th>homeownership_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>rent</td>\n      <td>don't own</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>mortgage</td>\n      <td>don't own</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>own</td>\n      <td>own</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Other questions?\n\n",
    "supporting": [
      "09-exam-1-review_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}