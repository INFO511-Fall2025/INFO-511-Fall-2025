{
  "hash": "ea071a0ae2e4552531401ca796267b70",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Model validation\nsubtitle: Lecture 19\nformat:\n  revealjs: default\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  error: false\n---\n\n## Setup {.smaller}\n\n::: {#73c95bee .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"whitegrid\", rc={\"figure.figsize\": (8, 6), \"axes.labelsize\": 16, \"xtick.labelsize\": 14, \"ytick.labelsize\": 14})\n```\n:::\n\n\n## Data: Candy Rankings {.smaller}\n\n::: {#0374274d .cell execution_count=2}\n``` {.python .cell-code}\ncandy_rankings = pd.read_csv(\"data/candy_rankings.csv\")\n\ncandy_rankings.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 85 entries, 0 to 84\nData columns (total 13 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   competitorname    85 non-null     object \n 1   chocolate         85 non-null     bool   \n 2   fruity            85 non-null     bool   \n 3   caramel           85 non-null     bool   \n 4   peanutyalmondy    85 non-null     bool   \n 5   nougat            85 non-null     bool   \n 6   crispedricewafer  85 non-null     bool   \n 7   hard              85 non-null     bool   \n 8   bar               85 non-null     bool   \n 9   pluribus          85 non-null     bool   \n 10  sugarpercent      85 non-null     float64\n 11  pricepercent      85 non-null     float64\n 12  winpercent        85 non-null     float64\ndtypes: bool(9), float64(3), object(1)\nmemory usage: 3.5+ KB\n```\n:::\n:::\n\n\n# Model validation\n\n## Overfitting {.smaller}\n\n::: incremental\n-   The data we are using to construct our models come from a larger population.\n\n-   Ultimately we want our model to tell us how the population works, not just the sample we have.\n\n-   If the model we fit is too tailored to our sample, it might not perform as well with the remaining population.\n    This means the model is \"overfitting\" our data.\n\n-   We measure this using **model validation** techniques.\n\n-   Note: Overfitting is not a huge concern with linear models with low level interactions, however it can be with more complex and flexible models.\n    The following is just an example of model validation, even though we're using it in a scenario where the concern for overfitting is not high.\n:::\n\n## Model validation {.smaller}\n\n::: incremental\n-   One commonly used model validation technique is to partition your data into training and testing set\n\n-   That is, fit the model on the training data\n\n-   And test it on the testing data\n\n-   Evaluate model performance using $RMSE$, root-mean squared error\n:::\n\n::: fragment\n$$ RMSE = \\sqrt{\\frac{\\sum_{i = 1}^n (y_i - \\hat{y}_i)^2}{n}} $$\n:::\n\n::: fragment\n::: question\nDo you think we should prefer low or high RMSE?\n:::\n:::\n\n## Random sampling and reproducibility {.smaller}\n\nGotta set a seed!\n\n::: {#fee5bf33 .cell execution_count=3}\n``` {.python .cell-code}\nnp.random.seed(1234)\n```\n:::\n\n\n::: incremental\n-   Use different seeds from each other\n\n-   Need inspiration?\n    <https://www.random.org/>\n:::\n\n## Cross validation {.smaller}\n\nMore specifically, **k-fold cross validation**\n\n::: columns\n::: {.column width=\"50%\"}\n::: incremental\n-   Split your data into k folds.\n\n-   Use 1 fold for testing and the remaining (k - 1) folds for training.\n\n-   Repeat k times.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/kfold.webp)\n:::\n:::\n\n## Prepping your data for 5-fold CV {.smaller}\n\n::: {#be2748aa .cell execution_count=4}\n``` {.python .cell-code}\ncandy_rankings['id'] = np.arange(len(candy_rankings))\ncandy_rankings = candy_rankings.sample(frac=1).reset_index(drop=True)\ncandy_rankings['fold'] = (np.arange(len(candy_rankings)) % 5) + 1\n\ncandy_rankings_cv = candy_rankings.groupby('fold').size().reset_index(name='count')\nprint(candy_rankings_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   fold  count\n0     1     17\n1     2     17\n2     3     17\n3     4     17\n4     5     17\n```\n:::\n:::\n\n\n## CV 1 {.smaller}\n\n::: {#567b99c0 .cell execution_count=5}\n``` {.python .cell-code}\ntest_fold = 1\ntest = candy_rankings[candy_rankings['fold'] == test_fold]\ntrain = candy_rankings[candy_rankings['fold'] != test_fold]\n\nmodel = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train).fit()\nrmse_test1 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nprint(f'RMSE Test 1: {rmse_test1}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 1: 10.15009006066606\n```\n:::\n:::\n\n\n## RMSE on training vs. testing {.smaller}\n\n::: question\nWould you expect the RMSE to be higher for your training data or your testing data?\nWhy?\n:::\n\n## RMSE on training vs. testing {.smaller}\n\nRMSE for testing:\n\n::: {#295143dc .cell execution_count=6}\n``` {.python .cell-code}\nrmse_test1 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nprint(f'RMSE Test 1: {rmse_test1}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 1: 10.15009006066606\n```\n:::\n:::\n\n\nRMSE for training:\n\n::: {#db319b3c .cell execution_count=7}\n``` {.python .cell-code}\nrmse_train1 = np.sqrt(mean_squared_error(train['winpercent'], model.predict(train)))\nprint(f'RMSE Train 1: {rmse_train1}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Train 1: 10.117840760774037\n```\n:::\n:::\n\n\n## CV 2 {.smaller}\n\n::: {#8f214132 .cell execution_count=8}\n``` {.python .cell-code}\ntest_fold = 2\ntest = candy_rankings[candy_rankings['fold'] == test_fold]\ntrain = candy_rankings[candy_rankings['fold'] != test_fold]\nmodel = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train).fit()\n```\n:::\n\n\n::: {#9b574079 .cell execution_count=9}\n``` {.python .cell-code}\nrmse_test2 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nrmse_train2 = np.sqrt(mean_squared_error(train['winpercent'], model.predict(train)))\nprint(f'RMSE Test 2: {rmse_test2}')\nprint(f'RMSE Train 2: {rmse_train2}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 2: 10.432240639004073\nRMSE Train 2: 10.027804484574576\n```\n:::\n:::\n\n\n## CV 3 {.smaller}\n\n::: {#bbaf927a .cell execution_count=10}\n``` {.python .cell-code}\ntest_fold = 3\ntest = candy_rankings[candy_rankings['fold'] == test_fold]\ntrain = candy_rankings[candy_rankings['fold'] != test_fold]\nmodel = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train).fit()\n```\n:::\n\n\n::: {#d78492c8 .cell execution_count=11}\n``` {.python .cell-code}\nrmse_test3 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nrmse_train3 = np.sqrt(mean_squared_error(train['winpercent'], model.predict(train)))\nprint(f'RMSE Test 3: {rmse_test3}')\nprint(f'RMSE Train 3: {rmse_train3}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 3: 11.95850312007085\nRMSE Train 3: 9.801042089669558\n```\n:::\n:::\n\n\n## CV 4 {.smaller}\n\n::: {#f17370d2 .cell execution_count=12}\n``` {.python .cell-code}\ntest_fold = 4\ntest = candy_rankings[candy_rankings['fold'] == test_fold]\ntrain = candy_rankings[candy_rankings['fold'] != test_fold]\nmodel = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train).fit()\n```\n:::\n\n\n::: {#5974a416 .cell execution_count=13}\n``` {.python .cell-code}\nrmse_test4 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nrmse_train4 = np.sqrt(mean_squared_error(train['winpercent'], model.predict(train)))\nprint(f'RMSE Test 4: {rmse_test4}')\nprint(f'RMSE Train 4: {rmse_train4}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 4: 12.39965858487449\nRMSE Train 4: 9.60646325325732\n```\n:::\n:::\n\n\n## CV 5 {.smaller}\n\n::: {#f2e4960e .cell execution_count=14}\n``` {.python .cell-code}\ntest_fold = 5\ntest = candy_rankings[candy_rankings['fold'] == test_fold]\ntrain = candy_rankings[candy_rankings['fold'] != test_fold]\nmodel = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train).fit()\n```\n:::\n\n\n::: {#f5cdaacf .cell execution_count=15}\n``` {.python .cell-code}\nrmse_test5 = np.sqrt(mean_squared_error(test['winpercent'], model.predict(test)))\nrmse_train5 = np.sqrt(mean_squared_error(train['winpercent'], model.predict(train)))\nprint(f'RMSE Test 5: {rmse_test5}')\nprint(f'RMSE Train 5: {rmse_train5}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE Test 5: 10.01290509309602\nRMSE Train 5: 10.13805597882432\n```\n:::\n:::\n\n\n## Putting it altogether {.smaller}\n\n::: {#d364ade1 .cell execution_count=16}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Dataframe\"}\nrmse_candy = pd.DataFrame({\n    'test_fold': np.arange(1, 6),\n    'rmse_train': [rmse_train1, rmse_train2, rmse_train3, rmse_train4, rmse_train5],\n    'rmse_test': [rmse_test1, rmse_test2, rmse_test3, rmse_test4, rmse_test5]\n})\n```\n:::\n\n\n::: {#efc10188 .cell execution_count=17}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Visual\"}\nplt.figure(figsize=(8, 5))\nsns.lineplot(data=rmse_candy, x='test_fold', y='rmse_test', marker='o', label='Test RMSE')\nplt.xlabel('Fold')\nplt.ylabel('RMSE')\nplt.title('Test RMSE for each fold')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](19-validation_files/figure-revealjs/cell-18-output-1.png){width=689 height=463}\n:::\n:::\n\n\n## How does RMSE compare to y? {.smaller}\n\n::: fragment\n-   `winpercent` summary stats:\n\n::: {#ec00cd72 .cell execution_count=18}\n\n::: {.cell-output .cell-output-stdout}\n```\ncount    85.000000\nmean     50.316764\nstd      14.714357\nmin      22.445341\n25%      39.141056\n50%      47.829754\n75%      59.863998\nmax      84.180290\nName: winpercent, dtype: float64\n```\n:::\n:::\n\n\n:::\n\n::: fragment\n-   `rmse_test` summary stats:\n\n::: {#a708b147 .cell execution_count=19}\n\n::: {.cell-output .cell-output-stdout}\n```\ncount     5.000000\nmean     10.990679\nstd       1.106390\nmin      10.012905\n25%      10.150090\n50%      10.432241\n75%      11.958503\nmax      12.399659\nName: rmse_test, dtype: float64\n```\n:::\n:::\n\n\n:::\n\n## `model_selection` in scikit-learn {.smaller}\n\n::: columns\n::: {.column width=\"40%\"}\n![](images/scikit-learn.png)\n:::\n\n::: {.column width=\"60%\"}\nThe **scikit-learn** package provides functions that help you create pipelines when modeling.\n\n::: {#445127e2 .cell execution_count=20}\n``` {.python .cell-code}\nfrom sklearn.model_selection import KFold\n```\n:::\n\n\n:::\n:::\n\n::: aside\n[model selection via scikit-learn](https://scikit-learn.org/stable/model_selection.html)\n:::\n\n## Cross Validation - Faster {.smaller}\n\n-   **`sklearn.model_selection.KFold`**: Partition data into k folds\n\n-   Calculate RMSEs for each of the models on the testing set\n\n## Partition data into k folds {.smaller}\n\nk = 5:\n\n::: {#7a84e571 .cell execution_count=21}\n``` {.python .cell-code}\nkf = KFold(n_splits=5, shuffle=True, random_state=102319)\nfolds = list(kf.split(candy_rankings))\n```\n:::\n\n\n## Fit model on each of training set {.smaller}\n\n::: {#b204fcfc .cell execution_count=22}\n``` {.python .cell-code}\nrmses = []\nfor train_index, test_index in folds:\n    train_data = candy_rankings.iloc[train_index]\n    test_data = candy_rankings.iloc[test_index]\n    model = smf.ols('winpercent ~ chocolate + fruity + peanutyalmondy + crispedricewafer + hard + sugarpercent', data=train_data).fit()\n    rmse = np.sqrt(mean_squared_error(test_data['winpercent'], model.predict(test_data)))\n    rmses.append(rmse)\n```\n:::\n\n\n## Calculate RMSEs {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {#806f187c .cell execution_count=23}\n``` {.python .cell-code code-fold=\"true\"}\nfold_ids = list(range(1, 6))\nplt.figure(figsize=(8, 5))\nplt.plot(fold_ids, rmses, marker='o', label='Test RMSE')\nplt.xlabel('Fold')\nplt.ylabel('RMSE')\nplt.title('Test RMSE for each fold')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](19-validation_files/figure-revealjs/cell-24-output-1.png){width=673 height=463}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n<br> <br>\n\n::: {#edf45db1 .cell execution_count=24}\n``` {.python .cell-code}\nrmse_summary = pd.Series(rmses).describe()\nprint(rmse_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncount     5.000000\nmean     10.644100\nstd       3.751177\nmin       5.336119\n25%       8.319019\n50%      11.885830\n75%      13.232239\nmax      14.447295\ndtype: float64\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "19-validation_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}