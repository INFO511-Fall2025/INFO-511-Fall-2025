{
  "hash": "28a2c10d7a472a73dcbe937750bea220",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Data wrangling\nsubtitle: Lecture 7\nformat:\n  revealjs: default\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  message: false\n---\n\n## Study tips for the exam\n\n::: incremental\n-   Go over lecture materials and application exercises\n-   Review labs and feedback you've received so far\n-   Do the exercises at the end of readings from both books\n-   Do the exam review (to be posted on Friday)\n:::\n\n## Frequently asked question {.smaller}\n\n**Is there a limit to a DataFrame size?**\n\nNo, a DataFrame can be any number of rows or columns.\nHowever, when you print it, it will only print the first few rows and the columns that fit across the screen.\n\nIf you want to see more rows and columns, you can:\n\n-   Open it in the data viewer with `df.head(n)`\n\n-   Explicitly print more rows with, e.g., `print(df.head(25))`\n\n-   Explicitly select or rearrange columns\n\n## Options for a DataFrame {.smaller}\n\n::: panel-tabset\n## Default\n\n::: {#4a411e96 .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv('data/midwest.csv')\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      PID     county state   area  poptotal   popdensity  popwhite  popblack  \\\n0     561      ADAMS    IL  0.052     66090  1270.961540     63917      1702   \n1     562  ALEXANDER    IL  0.014     10626   759.000000      7054      3496   \n2     563       BOND    IL  0.022     14991   681.409091     14477       429   \n3     564      BOONE    IL  0.017     30806  1812.117650     29344       127   \n4     565      BROWN    IL  0.018      5836   324.222222      5264       547   \n..    ...        ...   ...    ...       ...          ...       ...       ...   \n432  3048   WAUKESHA    WI  0.034    304715  8962.205880    298313      1096   \n433  3049    WAUPACA    WI  0.045     46104  1024.533330     45695        22   \n434  3050   WAUSHARA    WI  0.037     19385   523.918919     19094        29   \n435  3051  WINNEBAGO    WI  0.035    140320  4009.142860    136822       697   \n436  3052       WOOD    WI  0.048     73605  1533.437500     72157        90   \n\n     popamerindian  popasian  ...  percollege  percprof  poppovertyknown  \\\n0               98       249  ...   19.631392  4.355859            63628   \n1               19        48  ...   11.243308  2.870315            10529   \n2               35        16  ...   17.033819  4.488572            14235   \n3               46       150  ...   17.278954  4.197800            30337   \n4               14         5  ...   14.475999  3.367680             4815   \n..             ...       ...  ...         ...       ...              ...   \n432            672      2699  ...   35.396784  7.667090           299802   \n433            125        92  ...   16.549869  3.138596            44412   \n434             70        43  ...   15.064584  2.620907            19163   \n435            685      1728  ...   24.995504  5.659847           133950   \n436            481       722  ...   21.666382  4.583725            72685   \n\n     percpovertyknown  percbelowpoverty  percchildbelowpovert  \\\n0           96.274777         13.151443             18.011717   \n1           99.087145         32.244278             45.826514   \n2           94.956974         12.068844             14.036061   \n3           98.477569          7.209019             11.179536   \n4           82.505140         13.520249             13.022889   \n..                ...               ...                   ...   \n432         98.387674          3.121060              3.785820   \n433         96.330036          8.488697             10.071411   \n434         98.854785         13.786985             20.050708   \n435         95.460376          8.804031             10.592031   \n436         98.750085          8.525831             11.162997   \n\n     percadultpoverty  percelderlypoverty  inmetro  category  \n0           11.009776           12.443812        0       AAR  \n1           27.385647           25.228976        0       LHR  \n2           10.852090           12.697410        0       AAR  \n3            5.536013            6.217047        1       ALU  \n4           11.143211           19.200000        0       AAR  \n..                ...                 ...      ...       ...  \n432          2.590061            4.085479        1       HLU  \n433          6.953799           10.338641        0       AAR  \n434         11.695784           11.804558        0       AAR  \n435          8.660587            6.661094        1       HAU  \n436          7.375656            7.882918        0       AAR  \n\n[437 rows x 28 columns]\n```\n:::\n:::\n\n\n## `print()`\n\n::: {#9efbd874 .cell execution_count=2}\n``` {.python .cell-code}\nprint(df.head(13))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    PID     county state   area  poptotal   popdensity  popwhite  popblack  \\\n0   561      ADAMS    IL  0.052     66090  1270.961540     63917      1702   \n1   562  ALEXANDER    IL  0.014     10626   759.000000      7054      3496   \n2   563       BOND    IL  0.022     14991   681.409091     14477       429   \n3   564      BOONE    IL  0.017     30806  1812.117650     29344       127   \n4   565      BROWN    IL  0.018      5836   324.222222      5264       547   \n5   566     BUREAU    IL  0.050     35688   713.760000     35157        50   \n6   567    CALHOUN    IL  0.017      5322   313.058824      5298         1   \n7   568    CARROLL    IL  0.027     16805   622.407407     16519       111   \n8   569       CASS    IL  0.024     13437   559.875000     13384        16   \n9   570  CHAMPAIGN    IL  0.058    173025  2983.189660    146506     16559   \n10  571  CHRISTIAN    IL  0.042     34418   819.476190     34176        82   \n11  572      CLARK    IL  0.030     15921   530.700000     15842        10   \n12  573       CLAY    IL  0.028     14460   516.428571     14403         4   \n\n    popamerindian  popasian  ...  percollege   percprof  poppovertyknown  \\\n0              98       249  ...   19.631392   4.355859            63628   \n1              19        48  ...   11.243308   2.870315            10529   \n2              35        16  ...   17.033819   4.488572            14235   \n3              46       150  ...   17.278954   4.197800            30337   \n4              14         5  ...   14.475999   3.367680             4815   \n5              65       195  ...   18.904624   3.275891            35107   \n6               8        15  ...   11.917388   3.209601             5241   \n7              30        61  ...   16.197121   3.055727            16455   \n8               8        23  ...   14.107649   3.206799            13081   \n9             331      8033  ...   41.295808  17.757448           154934   \n10             51        89  ...   13.567226   3.089998            33788   \n11             26        36  ...   15.110863   2.776225            15615   \n12             17        29  ...   13.683010   2.788432            14248   \n\n    percpovertyknown  percbelowpoverty  percchildbelowpovert  \\\n0          96.274777         13.151443             18.011717   \n1          99.087145         32.244278             45.826514   \n2          94.956974         12.068844             14.036061   \n3          98.477569          7.209019             11.179536   \n4          82.505140         13.520249             13.022889   \n5          98.372002         10.399635             14.158819   \n6          98.478016         15.149781             13.787761   \n7          97.917287         11.710726             17.225462   \n8          97.350599         13.875086             17.994784   \n9          89.544286         15.572437             14.132234   \n10         98.169562         11.708299             16.320612   \n11         98.078010         12.007685             15.321547   \n12         98.533887         16.774284             20.582578   \n\n    percadultpoverty  percelderlypoverty  inmetro  category  \n0          11.009776           12.443812        0       AAR  \n1          27.385647           25.228976        0       LHR  \n2          10.852090           12.697410        0       AAR  \n3           5.536013            6.217047        1       ALU  \n4          11.143211           19.200000        0       AAR  \n5           8.179287           11.008586        0       AAR  \n6          12.932331           21.085271        0       LAR  \n7          10.027037            9.525052        0       AAR  \n8          11.914343           13.660180        0       AAR  \n9          17.562728            8.105017        1       HAU  \n10          9.569700           11.490641        0       AAR  \n11         10.131775           12.595420        0       AAR  \n12         14.464114           17.670078        0       LAR  \n\n[13 rows x 28 columns]\n```\n:::\n:::\n\n\n## Subsetting\n\n::: {#10e268dd .cell execution_count=3}\n``` {.python .cell-code}\nselected_columns = df[['county', 'state', 'percbelowpoverty', 'percollege']]\nprint(selected_columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        county state  percbelowpoverty  percollege\n0        ADAMS    IL         13.151443   19.631392\n1    ALEXANDER    IL         32.244278   11.243308\n2         BOND    IL         12.068844   17.033819\n3        BOONE    IL          7.209019   17.278954\n4        BROWN    IL         13.520249   14.475999\n..         ...   ...               ...         ...\n432   WAUKESHA    WI          3.121060   35.396784\n433    WAUPACA    WI          8.488697   16.549869\n434   WAUSHARA    WI         13.786985   15.064584\n435  WINNEBAGO    WI          8.804031   24.995504\n436       WOOD    WI          8.525831   21.666382\n\n[437 rows x 4 columns]\n```\n:::\n:::\n\n\n## Relocating\n\n::: {#be1823cc .cell execution_count=4}\n``` {.python .cell-code}\nrelocated_columns = df[['county', 'state', 'percbelowpoverty', 'percollege', *df.columns.difference(['county', 'state', 'percbelowpoverty', 'percollege'])]]\nprint(relocated_columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        county state  percbelowpoverty  percollege   PID   area category  \\\n0        ADAMS    IL         13.151443   19.631392   561  0.052      AAR   \n1    ALEXANDER    IL         32.244278   11.243308   562  0.014      LHR   \n2         BOND    IL         12.068844   17.033819   563  0.022      AAR   \n3        BOONE    IL          7.209019   17.278954   564  0.017      ALU   \n4        BROWN    IL         13.520249   14.475999   565  0.018      AAR   \n..         ...   ...               ...         ...   ...    ...      ...   \n432   WAUKESHA    WI          3.121060   35.396784  3048  0.034      HLU   \n433    WAUPACA    WI          8.488697   16.549869  3049  0.045      AAR   \n434   WAUSHARA    WI         13.786985   15.064584  3050  0.037      AAR   \n435  WINNEBAGO    WI          8.804031   24.995504  3051  0.035      HAU   \n436       WOOD    WI          8.525831   21.666382  3052  0.048      AAR   \n\n     inmetro  percadultpoverty  percamerindan  ...  percwhite  popadults  \\\n0          0         11.009776       0.148283  ...  96.712059      43298   \n1          0         27.385647       0.178807  ...  66.384340       6724   \n2          0         10.852090       0.233473  ...  96.571276       9669   \n3          1          5.536013       0.149322  ...  95.254171      19272   \n4          0         11.143211       0.239890  ...  90.198766       3979   \n..       ...               ...            ...  ...        ...        ...   \n432        1          2.590061       0.220534  ...  97.899020     195837   \n433        0          6.953799       0.271126  ...  99.112875      30109   \n434        0         11.695784       0.361104  ...  98.498839      13316   \n435        1          8.660587       0.488170  ...  97.507127      88960   \n436        0          7.375656       0.653488  ...  98.032742      46796   \n\n     popamerindian  popasian  popblack   popdensity  popother  \\\n0               98       249      1702  1270.961540       124   \n1               19        48      3496   759.000000         9   \n2               35        16       429   681.409091        34   \n3               46       150       127  1812.117650      1139   \n4               14         5       547   324.222222         6   \n..             ...       ...       ...          ...       ...   \n432            672      2699      1096  8962.205880      1935   \n433            125        92        22  1024.533330       170   \n434             70        43        29   523.918919       149   \n435            685      1728       697  4009.142860       388   \n436            481       722        90  1533.437500       155   \n\n     poppovertyknown  poptotal  popwhite  \n0              63628     66090     63917  \n1              10529     10626      7054  \n2              14235     14991     14477  \n3              30337     30806     29344  \n4               4815      5836      5264  \n..               ...       ...       ...  \n432           299802    304715    298313  \n433            44412     46104     45695  \n434            19163     19385     19094  \n435           133950    140320    136822  \n436            72685     73605     72157  \n\n[437 rows x 28 columns]\n```\n:::\n:::\n\n\n:::\n\n# Data wrangling\n\n# Data wrangling <br> AKA Munging 🤮\n\n# Joining datasets\n\n## Why join? {.smaller}\n\nSuppose we want to answer questions like:\n\n> Is there a relationship between\\\n> - number of DS courses taken\\\n> - motivation for taking course\\\n> - ...\\\n> and performance in this course?\"\n\n. . .\n\nEach of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.\n\n## Setup\n\nFor the next few slides...\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#8c84e6a3 .cell execution_count=5}\n``` {.python .cell-code}\nx = pd.DataFrame({\n    'id': [1, 2, 3],\n    'value_x': ['x1', 'x2', 'x3']\n})\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x\n0   1      x1\n1   2      x2\n2   3      x3\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#075bb677 .cell execution_count=6}\n``` {.python .cell-code}\ny = pd.DataFrame({\n    'id': [1, 2, 4],\n    'value_y': ['y1', 'y2', 'y4']\n})\n\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_y\n0   1      y1\n1   2      y2\n2   4      y4\n```\n:::\n:::\n\n\n:::\n:::\n\n## Left join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/left-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#20991088 .cell execution_count=7}\n``` {.python .cell-code}\nleft_merged = pd.merge(x, y, on='id', how='left')\nprint(left_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x value_y\n0   1      x1      y1\n1   2      x2      y2\n2   3      x3     NaN\n```\n:::\n:::\n\n\n:::\n:::\n\n## Right join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/right-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#39e69c92 .cell execution_count=8}\n``` {.python .cell-code}\nright_merged = pd.merge(x, y, on='id', how='right')\nprint(right_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x value_y\n0   1      x1      y1\n1   2      x2      y2\n2   4     NaN      y4\n```\n:::\n:::\n\n\n:::\n:::\n\n## Outer (full) join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/full-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#b8731d42 .cell execution_count=9}\n``` {.python .cell-code}\nouter_merged = pd.merge(x, y, on='id', how='outer')\nprint(outer_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x value_y\n0   1      x1      y1\n1   2      x2      y2\n2   3      x3     NaN\n3   4     NaN      y4\n```\n:::\n:::\n\n\n:::\n:::\n\n## Inner join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/inner-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#35c4374c .cell execution_count=10}\n``` {.python .cell-code}\ninner_merged = pd.merge(x, y, on='id', how='inner')\nprint(inner_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x value_y\n0   1      x1      y1\n1   2      x2      y2\n```\n:::\n:::\n\n\n:::\n:::\n\n## Semi-join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/semi-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#8392e323 .cell execution_count=11}\n``` {.python .cell-code}\nsemi_merged = x[x['id'].isin(y['id'])]\nprint(semi_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x\n0   1      x1\n1   2      x2\n```\n:::\n:::\n\n\n:::\n:::\n\n## Anti-join\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/anti-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#6e5067ff .cell execution_count=12}\n``` {.python .cell-code}\nanti_merged = x[~x['id'].isin(y['id'])]\nprint(anti_merged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id value_x\n2   3      x3\n```\n:::\n:::\n\n\n:::\n:::\n\n::: fragment\n🤮\n:::\n\n## Pivoting (`.melt()`) {.smaller}\n\n::: incremental\n-   Data sets can't be labeled as *wide* or *long*, but they can be made *wider* or *longer* for a certain analysis that requires a certain format.\n\n-   When pivoting longer, variable names that turn into values are characters by default.\n    If you need them to be in another format, you need to explicitly make that transformation, which you can do within the `melt()` function.\n:::\n\n## `ae-05-majors-wrangling`\n\n",
    "supporting": [
      "07-wrangling_files"
    ],
    "filters": [],
    "includes": {}
  }
}