{
  "hash": "715d5604c768b562e0e11466c0728e34",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Intro to Python\nsubtitle: Lecture 2\nformat:\n  revealjs: default\neditor_options:\n  chunk_output_type: console\n---\n\n# Intro to Python {style=\"text-align: center;\"}\n\n![](images/python.jpeg){fig-align=\"center\" width=\"200\"}\n\n## What is Python?\n\n::: incremental\n-   \"Python is the second best language at everything.\" - **Van Lindberg**\n\n-   Versatile and popular programming language with simple syntax\n\n-   Large collection of frameworks and libraries\n\n-   Large, active community\n\n-   Widely used for web development, data analysis, artificial intelligence, scientific computing, and more.\n:::\n\n## Basic syntax and comments\n\n::: {#4b13066b .cell execution_count=1}\n``` {.python .cell-code}\n# This is a comment\nprint(\"Hello, Python!\")  # This prints a message\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Python!\n```\n:::\n:::\n\n\n::: incremental\n-   Indentation for code blocks (instead of brackets)\n\n-   Comments start with a `#` (used to explain code)\n:::\n\n## Variables and data types\n\n::: {#4d62ccd9 .cell execution_count=2}\n``` {.python .cell-code}\n# Integer\nx = 5\n\n# Float\ny = 3.14\n\n# String\nname = \"Python\"\n\n# Boolean\nis_easy = True\n```\n:::\n\n\n::: incremental\n-   Variables store data values.\n\n-   Python uses integers (whole numbers), floats (non-whole numbers), strings (text), and booleans (true/false).\n:::\n\n## Factors (categorical data)\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#5e836c52 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n\nx = pd.Categorical([\"a\", \"b\", \"b\", \"a\"])\nprint(x)\nprint(type(x))\nprint(x.categories)\nprint(x.codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'b', 'a']\nCategories (2, object): ['a', 'b']\n<class 'pandas.core.arrays.categorical.Categorical'>\nIndex(['a', 'b'], dtype='object')\n[0 1 1 0]\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/factor.png){fig-align=\"center\" width=\"400\"}\n:::\n:::\n\n## Other classes\n\n::: columns\n::: {.column width=\"50%\"}\n**Date**\n\n::: {#5c443f65 .cell execution_count=4}\n``` {.python .cell-code}\nimport datetime\n\ntoday = datetime.date.today()\nprint(today)\nprint(type(today))\nprint(dir(today))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024-08-19\n<class 'datetime.date'>\n['__add__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', 'ctime', 'day', 'fromisocalendar', 'fromisoformat', 'fromordinal', 'fromtimestamp', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'min', 'month', 'replace', 'resolution', 'strftime', 'timetuple', 'today', 'toordinal', 'weekday', 'year']\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n**Date-Time**\n\n::: {#425edc17 .cell execution_count=5}\n``` {.python .cell-code}\nnow = pd.Timestamp(\"2024-02-08 11:45:00\", tz=\"EST\")\nprint(now)\nprint(type(now))\nprint(now.tz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024-02-08 11:45:00-05:00\n<class 'pandas._libs.tslibs.timestamps.Timestamp'>\nEST\n```\n:::\n:::\n\n\n:::\n:::\n\n## Basic operations\n\n::: {#602f313e .cell execution_count=6}\n``` {.python .cell-code}\n# Arithmetic Operations\na = 10\nb = 3\nsum = a + b\ndifference = a - b\nproduct = a * b\nquotient = a / b\n\n# Logical Operations\nis_greater = a > b\nis_equal = (a == b)\n```\n:::\n\n\n::: incremental\n-   Python supports various arithmetic and logical operations.\n:::\n\n## Control structures: if-else\n\n::: {#b8f3155f .cell execution_count=7}\n``` {.python .cell-code}\nage = 20\nif age >= 18:\n    print(\"Adult\")\nelse:\n    print(\"Minor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdult\n```\n:::\n:::\n\n\n::: incremental\n-   Python uses **`if`**, **`elif`**, and **`else`** for decision-making.\n:::\n\n## Loops\n\n::: {#2c20fdd0 .cell execution_count=8}\n``` {.python .cell-code}\n# For Loop\nfor i in range(5):\n    print(i)\n\n# While Loop\nj = 0\nwhile j < 5:\n    print(j)\n    j += 1\n```\n:::\n\n\n::: incremental\n-   Python has two types of loops: **`for`** and **`while`**.\n:::\n\n## Lists\n\n::: {#0c8c1d4b .cell execution_count=9}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Accessing the first item\n```\n:::\n\n\n::: incremental\n-   Lists store multiple items in a single variable.\n-   Access elements using index (starting at 0).\n:::\n\n## Functions\n\n::: {#2f6091e7 .cell execution_count=10}\n``` {.python .cell-code}\ndef greet(name):\n    return \"Hello \" + name\n\nprint(greet(\"Alice\"))\n```\n:::\n\n\n::: incremental\n-   Functions perform specific tasks.\n\n-   Call a function with its name and arguments.\n:::\n\n## Conclusion\n\n::: incremental\n-   Python is a versatile and user-friendly language.\n\n-   Ideal for beginners and widely used.\n\n-   Encourages readable and maintainable code.\n\n-   Extensive libraries and community support.\n:::\n\n# Toolkit: Version control and collaboration\n\n## Git and GitHub {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/git-logo.png){fig-alt=\"Git logo\" fig-align=\"center\" width=\"150\"}\n\n-   Git is a version control system -- like \"Track Changes\" features from Microsoft Word, on steroids\n-   It's not the only version control system, but it's a very popular one\n:::\n\n::: {.column width=\"50%\"}\n![](images/github-logo.png){fig-alt=\"GitHub logo\" fig-align=\"center\" width=\"150\"}\n\n-   GitHub is the home for your Git-based projects on the internet -- like DropBox but much, much better\n\n-   We will use GitHub as a platform for web hosting and collaboration (and as our course management system!)\n:::\n:::\n\n## Versioning - done badly\n\n![](images/phd_comics_vc.gif){fig-align=\"center\"}\n\n## Versioning - done better\n\n![](images/lego-steps.png){fig-align=\"center\"}\n\n## Versioning - done even better\n\n### with human readable messages\n\n![](images/lego-steps-commit-messages.png){fig-align=\"center\"}\n\n## How will we use Git and GitHub?\n\n![](images/whole-game-01.png){fig-align=\"center\"}\n\n## How will we use Git and GitHub?\n\n![](images/whole-game-02.png){fig-align=\"center\"}\n\n## How will we use Git and GitHub?\n\n![](images/whole-game-03.png){fig-align=\"center\"}\n\n## How will we use Git and GitHub?\n\n![](images/whole-game-04.png){fig-align=\"center\"}\n\n## Git and GitHub tips {.smaller}\n\n::: incremental\n-   There are millions of git commands -- ok, that's an exaggeration, but there are a lot of them -- and very few people know them all. 99% of the time you will use git to add, commit, push, and pull.\n-   We will be doing Git things and interfacing with GitHub through VS Code, but if you google for help you might come across methods for doing these things in the command line -- skip that and move on to the next resource unless you feel comfortable trying it out.\n-   There is a great resource for working with git and Python: [git-github-python](https://www.pythonguis.com/tutorials/git-github-python/). Some of the content in there is beyond the scope of this course, but it's a good place to look for help.\n:::\n\n## Tour: Git + GitHub\n\n::: demo\n**Just one option for now:**\n\nSit back and enjoy the show!\n:::\n\n",
    "supporting": [
      "02-python-git_files"
    ],
    "filters": [],
    "includes": {}
  }
}