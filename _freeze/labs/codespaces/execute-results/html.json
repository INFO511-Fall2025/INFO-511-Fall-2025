{
  "hash": "86a223ad4462bfe7b3f7cb0e57247ce7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Working with Codespaces\ncategories: Homework\nexecute:\n  warning: false\n  error: false\n---\n\n## Getting Started with Python on Codespaces\n\n### 1. Launching a Codespace\n\n1.  Navigate to the GitHub repository.\n\n2.  Click on the green **Code** button, and select **Codespaces**.\n\n    -   If a Codespace environment isn’t set up yet, click **Create codespace on main**.\n\n    -   This will initialize a cloud-based development environment pre-configured for this repository.\n\n### 2. Initializing the Environment\n\nOnce the Codespace is launched:\n\n1.  **Verify Python Version**:\n\n-   Open the terminal in Codespaces and run:\n\n``` bash\npython3 --version\n```\n\n-   Ensure it outputs Python 3.x. If not, install Python 3 using:\n\n``` bash\nsudo apt-get install python3\n```\n\n2.  **Install Dependencies**:\n\n-   Install the required Python packages listed in `requirements.txt`:\n\n``` bash\npip install -r requirements.txt\n```\n\n3.  **Verify the Installation**:\n\n-   Run `pip freeze` to confirm that the dependencies are installed.\n\n### 3. Running Python Code\n\n1.  **Running the Application**:\n\n-   The main script seems to be `ds.py`. You can run it with:\n\n``` bash\npython3 ds.py\n```\n\n2.  **Running Tests**:\n\n-   The test file `test_ds.py` is located in the root directory.\n\n-   Run tests using `unittest`:\n\n``` bash\npython3 -m unittest test_ds.py\n```\n\n-   Alternatively, if `pytest` is installed:\n\n``` bash\npytest test_ds.py\n```\n\n3.  **Linting Code**:\n\n-   Use `pylint` to check the quality of `ds.py`:\n\n``` bash\npylint ds.py\n```\n\n### 4. Editing Files\n\n1.  **Editing the Code**:\n\n-   Open files (like `ds.py` or `test_ds.py`) using the built-in VS Code editor in Codespaces.\n\n-   Make your edits and save.\n\n2.  **Adding New Files**:\n\n-   To add new scripts or test files, right-click in the file explorer panel, and select **New File**.\n\n### 5. Debugging\n\n1.  Set up breakpoints by clicking in the gutter (left margin) of your code editor.\n\n2.  Use the Debug panel to start a debugging session.\n\n### 6. Committing Changes\n\n1.  **Stage and Commit Changes**:\n\n-   Stage your changes:\n\n``` bash\ngit add .\n```\n\n-   Commit the changes:\n\n``` bash\ngit commit -m \"Your commit message\"\n```\n\n2.  **Push Changes to GitHub**:\n\n-   Push your changes to the repository:\n\n``` bash\ngit push origin main\n```\n\n### 7. Closing and Reopening Codespaces\n\n1.  When finished, click **Stop Codespace** to save resources.\n\n2.  To reopen, return to the **Codespaces** tab in GitHub and select your environment.\n\n### Common Commands Summary\n\n| Task                 | Command                               |\n|----------------------|---------------------------------------|\n| Run linting          | `pylint ds.py`                        |\n| Install dependencies | `pip install -r requirements.txt`     |\n| Stage changes        | `git add .`                           |\n| Commit changes       | `git commit -m \"Your commit message\"` |\n| Push changes         | `git push origin main`                |\n\nThis guide ensures you’re set up to write, test, and manage Python code effectively in GitHub Codespaces!\n\n",
    "supporting": [
      "codespaces_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}