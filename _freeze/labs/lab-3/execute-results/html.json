{
  "hash": "613900a02488c68e4f5cdf3435476c32",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lab 3 - Data tidying and joining\ncategories: Lab\nexecute:\n  warning: false\n  error: false\n---\n\n# Introduction\n\nIn this lab you'll build the data wrangling and visualization skills you've developed so far and data tidying and joining to your repertoire.\n\n::: callout-note\nThis lab assumes you've completed the labs so far and doesn't repeat setup and overview content from those labs.\nIf you have not yet done those, you should go back and review the previous labs before starting on this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be able to pivot/reshape data using `pandas`\n-   Continue developing your data wrangling skills using `pandas`\n-   Build on your mastery of data visualizations using `matplotlib` and `seaborn`\n-   Get more experience with data science workflow using Python, Jupyter, Git, and GitHub\n-   Further your reproducible authoring skills with Jupyter Notebooks\n-   Improve your familiarity with version control using Git and GitHub\n\n## Getting started\n\n### Clone the repo & start new VS Code window\n\n-   Go to the course organization at [github.com/INFO-511-S25](https://github.com/INFO-511-S25) organization on GitHub.\n    Click on the repo with the prefix **lab-3**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use HTTPS** (this might already be selected by default).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In VS Code, go to *File* ➛ *New Window* ➛*Clone Git Repository (under **Start**)*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Provide repository URL or pick a repository source*.\n\n-   Click *lab-3.ipynb* to open the template Jupyter notebook file.\n    This is where you will write up your code and narrative for the lab.\n\n-   Also see similar steps within the [Setting up Python](https://datasciaz.netlify.app/computing/computing-python.html#prepare-vs-code-for-python) page on the course website.\n\n## Packages\n\nIn this lab we will work with the **pandas**, **matplotlib**, and **seaborn** packages for data analysis and visualization.\n\n::: {#d3f5f1df .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n**Run All** in the document which loads these packages with the `import` function.\n\n## Guidelines\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\n::: callout-note\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\nThere will be periodic reminders in this assignment to remind you to **Run all, commit, and sync** your changes to GitHub.\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Part 1\n\n**Inflation across the world**\n\nFor this part of the analysis you will work with inflation data from various countries in the world over the last 30 years.\n\n::: {#load-country-data .cell message='false' execution_count=2}\n``` {.python .cell-code}\ncountry_inflation = pd.read_csv(\"data/country-inflation.csv\")\n```\n:::\n\n\n### Question 1\n\nGet to know the data.\n\na.  `info()` at the `country_inflation` data frame and answer the following questions based on the output.\n    How many rows does `country_inflation` have and what does each row represent?\n    How many columns does `country_inflation` have and what does each column represent?\n\nb.  Display a list of the countries included in the dataset.\n\n::: callout-tip\nA function that can be useful for part (b) is `unique()`.\nCheck out its documentation for examples of usage.\n:::\n\n### Question 2\n\nWhich countries had the top three highest inflation rates in 2021?\nYour output should be a data frame with two columns, `country` and `2021`, with inflation rates in descending order, and three rows for the top three countries.\nBriefly comment on how the inflation rates for these countries compare to the inflation rate for United States in that year.\n\n### Question 3\n\nCopy the `inf_ratio` data set and perform the following:\n\n-   calculate the ratio of the inflation in 2021 and inflation in 1993 for each country and store this information in a new column called `inf_ratio`,\n-   arrange the data frame in decreasing order of `inf_ratio`, and\n-   select the variables `country` and `inf_ratio` to display as the result.\n\nDo not save this new variable in `inf_ratio`, but instead keep it within the copy.\n\nWhich country's inflation change is the largest over this time period?\nDid inflation increase of decrease between 1993 and 2021 in this country?\n\n### Question 4\n\nReshape (pivot) `country_inflation` such that each row represents a country/year combination, with columns `country`, `year`, and `annual_inflation`.\nThen, display the resulting data frame and state how many rows and columns it has.\n\nRequirements:\n\n-   Your code must use one of `melt()` or `pivot_table()`. There are other ways you can do this reshaping move in Python, but this question requires solving this problem by pivoting.\n-   The resulting DataFrame must be saved as something other than `country_inflation` so you (1) can refer to this DataFrame later in your analysis and (2) do not overwrite country_inflation. Use a short but informative name.\n\n::: callout-important\nThe remaining questions in Part 1 require the use of the pivoted data frame from Question 4.\n:::\n\n### Question 5\n\nUse a separate copy of the data to answer each of the following questions.\n\nRequirement: Your code must use the `query()` function for each part, not `sort_values()`.\n\na.  What is the highest inflation rate observed between 1993 and 2021?\n    The output of this copy should be a data frame with one row and three columns.\n    In addition to code and output, your response should include a single sentence stating the country and year.\n\nb.  What is the lowest inflation rate observed between 1993 and 2021?\n    The output of this copy should be a data frame with one row and three columns.\n    In addition to code and output, your response should include a single sentence stating the country and year.\n\nc.  Putting (a) and (b) together: What are the highest and the lowest inflation rates observed between 1993 and 2021?\n    The output of the copy should be a data frame with two rows and three columns.\n\n### Question 6\n\na\\.\nCreate a vector called `countries_of_interest` which contains the names of up tp five countries you want to visualize the inflation rates for over the years.\nFor example, if these countries are India and United States, you can express this as follows:\n\n::: {#95ea2267 .cell execution_count=3}\n``` {.python .cell-code}\ncountries_of_interest = [\"India\", \"United States\"]\n```\n:::\n\n\nIf they are India, United States, and China, you can express this as follows:\n\n::: {#6702abe6 .cell execution_count=4}\n``` {.python .cell-code}\ncountries_of_interest = [\"India\", \"United States\", \"China (People's Republic of)\"]\n```\n:::\n\n\nSo on and so forth...\nThen, in 1-2 sentences, state why you chose these countries.\n\n::: callout-note\nYour `countries_of_interest` should consist of no more than five countries.\nMake sure that the spelling of your countries matches how they appear in the dataset.\n:::\n\nb\\.\nIn a separate data copy, filter your reshaped dataset to include only the `countries_of_interest` from part (a), and save the resulting data frame with a new name so you (1) can refer to this data frame later in your analysis and (2) do not overwrite the data frame you're starting with.\nUse a short but informative name.\nThen, in a new copy, find the `unique()` countries in the data frame you created.\n\n::: callout-tip\nThe number of distinct countries in the filtered data frame you created in part (b) should equal the number of countries you chose in part (a).\nIf it doesn't, you might have misspelled a country name or made a mistake in how to filter for these countries.\nGo back and check your code.\n:::\n\n### Question 7\n\nUsing your data frame from the previous question, create a plot of annual inflation vs. year for these countries.\nThen, in a few sentences, describe the patterns you observe in the plot, particularly focusing on anything you find surprising or not surprising, based on your knowledge (or lack thereof) of these countries economies.\n\nRequirements for the plot:\n\n-   Data should be represented with points as well as lines connecting the points for each country.\n-   Each country should be represented by a different color line and different color and shape points.\n-   Axes and legend should be properly labeled.\n-   The plot should have an appropriate title (and optionally a subtitle).\n-   Plot should be customized in at least one way – you could use a different than default color scale, or different than default theme, or some other customization.\n\n::: render-commit-push\nIf you haven't yet done so, now is a good time to run all, commit, and sync.\n\n<br>\n\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n## Part 2\n\n**Inflation in the US**\n\nThe OECD defines inflation as follows:\n\n> Inflation is a rise in the general level of prices of goods and services that households acquire for the purpose of consumption in an economy over a period of time.\n>\n> The main measure of inflation is the annual inflation rate which is the movement of the Consumer Price Index (CPI) from one month/period to the same month/period of the previous year expressed as percentage over time.\n>\n> Source: [OECD CPI FAQ](https://www.oecd.org/sdd/prices-ppp/consumerpriceindices-frequentlyaskedquestionsfaqs.htm#1)\n\nCPI is broken down into 12 divisions such as food, housing, health, etc.\nYour goal in this part is to create another time series plot of annual inflation, this time for US only.\n\nThe data you will need to create this visualization is spread across two files:\n\n-   `us-inflation.csv`: Annual inflation rate for the US for 12 CPI divisions. Each division is identified by an ID number.\n-   `cpi-divisions.csv`: A \"lookup table\" of CPI division ID numbers and their descriptions.\n\nLet's load both of these files.\n\n::: {#load-us-data .cell message='false' execution_count=5}\n``` {.python .cell-code}\nus_inflation = pd.read_csv(\"data/us-inflation.csv\")\ncpi_divisions = pd.read_csv(\"data/cpi-divisions.csv\")\n```\n:::\n\n\n### Question 8\n\na\\.\nHow many columns and how many rows does the `us_inflation` dataset have?\nWhat are the variables in it?\nAdd a brief (1-2 sentences) narrative summarizing this information.\n\nb\\.\nHow many columns and how many rows does the `cpi_divisions` dataset have?\nWhat are the variables in it?\nAdd a brief (1-2 sentences) narrative summarizing this information.\n\nc\\.\nCreate a new dataset by joining the `us_inflation` dataset with the `cpi_division_id` dataset.\n\n-   Determine which type of join is the most appropriate one and use that.\n\n-   Note that the two datasets don't have a common variable.\n    Review the help for the join functions to determine how to use the `on` argument when the names of the variables that the datasets should be joined by are different.\n\n-   Use a short but informative name for the joined dataset, and do not overwrite either of the datasets that go into creating it.\n\nThen, find the number of rows and columns of the resulting dataset and report the names of its columns.\nAdd a brief (1-2 sentences) narrative summarizing this information.\n\n### Question 9\n\na\\.\nCreate a vector called `divisions_of_interest` which contains the descriptions or IDs of CPI divisions you want to visualize.\nYour `divisions_of_interest` should consist of no more than five divisions.\nIf you're using descriptions, make sure that the spelling of your divisions matches how they appear in the dataset.\nThen, in 1-2 sentences, state why you chose these divisions.\n\n::: callout-tip\nRefer back to the guidance provided in [Question 6] if you're not sure how to create this vector.\n:::\n\nb\\.\nIn a copy of the data, filter your reshaped dataset to include only the `divisions_of_interest` from part (a), and save the resulting data frame with a new name so you (1) can refer to this data frame later in your analysis and (2) do not overwrite the data frame you're starting with.\nUse a short but informative name.\nThen, in a new copy of the data, find the `unique()` divisions in the data frame you created.\n\n### Question 10\n\nUsing your data frame from the previous question, create a plot of annual inflation vs. year for these divisions.\nThen, in a few sentences, describe the patterns you observe in the plot, particularly focusing on anything you find surprising or not surprising, based on your knowledge (or lack thereof) of inflation rates in the US over the last decade.\n\n-   Data should be represented with points as well as lines connecting the points for each division.\n-   Each division should be represented by a different color line and different color and shape points.\n-   Axes and legend should be properly labeled.\n-   The plot should have an appropriate title (and optionally a subtitle).\n-   Plot should be customized in at least one way – you could use a different than default color scale, or different than default theme, or some other customization.\n-   If your legend has labels that are too long, you can try moving the legend to the bottom and stack the labels vertically. *Hint:* The legend argument of the ax.legend() method will be useful.\n\n::: {#3629358a .cell execution_count=6}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\nsns.___(...)\nplt.___(...)\nplt.___(\"Year\")\nplt.ylabel(...)\nplt.___(...)\nplt.show()\n```\n:::\n\n\n::: render-commit-push\nIf you haven't yet done so since Part 1, now is a good time to run all, commit, and sync.\n\n<br>\n\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n# Wrap-up\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in the .ipynb file by the submission deadline to be considered \"on time\".\n:::\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   run all code in your Jupyter notebook\n-   committed and pushed everything to your GitHub repository such that the Git pane in VS Code is empty\n:::\n\n## Grading\n\nThe lab is graded out of a total of 50 points.\n\nOn Questions 1 through 10, you can earn up to 5 points on each question:\n\n-   5: Response shows excellent understanding and addresses all or almost all of the rubric items.\n\n-   4: Response shows good understanding and addresses most of the rubric items.\n\n-   3: Response shows understanding and addresses a majority of the rubric items.\n\n-   2: Response shows effort and misses many of the rubric items.\n\n-   1: Response does not show sufficient effort or understanding and/or is largely incomplete.\n\n-   0: No attempt.\n\n",
    "supporting": [
      "lab-3_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}