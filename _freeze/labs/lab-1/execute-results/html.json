{
  "hash": "5af44d66cf807e891ed8bb50d40e9cf7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lab 1 - Introduction to Python\nexecute:\n  warning: false\n  error: false\n---\n\n# Introduction\n\nThis lab will introduce you to the course computing workflow.\nThe main goal is to reinforce our demo of Python and VS Code, which we will be using throughout the course both to learn the data science concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nPython is the name of the programming language itself and VS Code (via Jupyter Notebooks) is a convenient interface, commonly referred to as an integrated development environment or an IDE, for short.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the version control, web hosting, and collaboration systems that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer.\nBefore we get to that stage, however, you need to build some basic fluency in Python.\nToday we begin with the fundamental building blocks of Python and VS Code: the interface, reading in data, and basic commands.\n\n::: callout-warning\nThis lab assumes that you have already completed [Lab 0](/labs/lab-0.html).\nIf you have not, please go back and do that first before proceeding.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using Python, VS Code, Git, and GitHub\n-   Gain practice writing a reproducible report using Jupyter\n-   Practice version control using Git and GitHub\n-   Understand fundamental syntax in Python\n\n## Getting started\n\n### Clone the repo & start new VS Code window\n\n-   Go to the course organization at [github.com/INFO-511-S25](https://github.com/INFO-511-S25) organization on GitHub.\n    Click on the repo with the prefix **lab-1**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use HTTPS** (this might already be selected by default).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In VS Code, go to *File* ➛ *New Window* ➛*Clone Git Repository (under **Start**)*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Provide repository URL or pick a repository source*.\n\n-   Click *lab-1.ipynb* to open the template Jupyter notebook file.\n    This is where you will write up your code and narrative for the lab.\n\n-   Also see similar steps within the [Setting up Python](https://datasciaz.netlify.app/computing/computing-python.html#prepare-vs-code-for-python) page on the course website.\n\n### Python and VS Code\n\nBelow are the components of the VS Code IDE.\n\n![](images/tour-vs-code.png){fig-alt=\"VS Code IDE\" fig-align=\"center\"}\n\nBelow are the components of a Jupyter notebook (.ipynb) file.\n\n![](images/tour-jupyter.png){fig-align=\"center\"}\n\n::: callout-important\nOpen the Jupyter notebook (`.ipynb`) file in your project, change the author name to your name, and render the document.\nExamine the document.\n:::\n\n### Committing changes\n\nNow, go to the Git pane in your VS Code window (third icon on the left - above there is a blue (2) next to it).\n\nIf you have made changes to your Jupyter Notebook (.ipynb) file, you should see it listed here.\nClick on it to see the differences.\nThis shows you the *difference* between the last committed state of the document and its current state including changes.\nYou should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository.\nFirst, write a meaningful commit message (for instance, \"update author name\") in the **Message** box.\nFinally, click **Commit**.\nNote that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious.\nYou should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use.\nAs the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub.\nGo to your GitHub repo and refresh the page.\nYou should see your commit message next to the updated files.\nIf you see this, all your changes are on GitHub and you're good to go!\n\n### Pushing changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you normally must have **staged** your **commit** to be pushed.\nclick on **Push**.\nOn VS Code however, the staging step has been done for you.\n\n## Packages\n\nIn this lab we will work with the **numpy** and **pandas** packages, which is a collection of packages for doing data exploration and analysis in Python.\n\n::: {#3c1832da .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport statistics\nimport pandas as pd\nimport numpy as np\nimport string\n```\n:::\n\n\n**Run All** in the document which loads these packages with the `import` function.\n\n## Guidelines\n\n::: callout-note\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\nThere will be periodic reminders in this assignment to remind you to **Run all, commit, and sync** your changes to GitHub.\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Python Basics\n\n### Question 1: Variables and Types\n\n-   Define two variables: an integer named `age` with a value of 25 and a string named `course` with the value \"Data Mining\".\n\n-   Print their values and types using the `type()` function.\n\n::: {#3d62a84e .cell execution_count=2}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2: Control Structures\n\n-   Write a function `is_prime(num)` that takes an integer and returns `True` if the number is a prime number, `False` otherwise.\n\n-   Include a loop and an appropriate control flow statement to check for primality.\n\n::: {#af7a7f00 .cell execution_count=3}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n\n<br>\n:::\n\n### Question 3: Data Structures\n\n-   Create a dictionary named `student_grades` with keys as student names and values as their grades (A, B, C, D, F).\n\n-   Write a loop to print out each student's name and grade in the format: \"Student \\[Name\\] has grade \\[Grade\\]\".\n\n::: {#8dac4f27 .cell execution_count=4}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n<br>\n:::\n\n### Question 4: List Comprehension & Functions\n\n-   Using list comprehension, generate a list of tuples where each tuple is `(number, square of number)` for numbers between 1 and 10.\n\n-   Write a function `calculate_stats(numbers)` that returns the mean, median, and standard deviation of a list of numbers.\n    Utilize functions from the **`statistics`** module.\n\n::: {#fff991b4 .cell execution_count=5}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## NumPy Introduction\n\n### Question 5: NumPy Arrays\n\n-   Create a NumPy array `A` of shape (10,10) with values ranging from 0 to 99.\n\n-   Calculate the determinant of matrix `A` (use `numpy.linalg.det`).\n    Print the result.\n\n::: {#4a360c77 .cell execution_count=6}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nNow is another good time to Run all, commit, and sync your changes to GitHub with a meaningful commit message.\n\nOnce again, make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Question 6: Array Operations\n\nGiven a 1D NumPy array of size 10, normalize it (i.e., scale the values to range between 0 and 1).\n\n::: {#6474e918 .cell execution_count=7}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nNow is another good time to Run all, commit, and sync your changes to GitHub with a meaningful commit message.\n\nAnd once again, make sure to commit and push all changed files so that your Git pane is empty afterward.\nWe keep repeating this because it's important and because we see students forget to do this.\nSo take a moment to make sure you're following along with the version control instructions.\n:::\n\n### Question 7: Extract and Print Elements\n\n-   Extract and print all the elements from the third column of a given 2D NumPy array.\n\n-   Use a for loop to iterate through each element of this column and print their square roots.\n\n::: {#cfe43940 .cell execution_count=8}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: render-commit-push\nRun all, commit, and sync your final changes to GitHub with a meaningful commit message.\n<br> Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n## Pandas Introduction\n\n### Question 8: Series and DataFrame Basics\n\n-   Create a Pandas Series with the labels as the first 10 letters of the alphabet and the values as random integers from 1 to 100.\n\n-   Convert this Series into a DataFrame with the column name `Random_Numbers`.\n\n::: {#c9e29221 .cell execution_count=9}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n### Question 9: Data Importing and Inspection\n\n-   Load a CSV file into a Pandas DataFrame.\n    The CSV has columns `id`, `name`, `score`.\n\n-   Print out the data types of the columns and the first 10 rows of the DataFrame.\n\n::: {#5af0c050 .cell execution_count=10}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n### Question 10: **Data Manipulation and Cleaning**\n\n**Data Manipulation and Cleaning**:\n\n-   Replace all instances of a missing 'score' with the median score.\n\n-   Add a new column 'score_normalized' that contains the 'score' column normalized to have a mean of 0 and a standard deviation of 1.\n\n::: {#d8390385 .cell execution_count=11}\n``` {.python .cell-code}\n# add code here.\n```\n:::\n\n\n::: callout-tip\nIts okay if you don't get this last question 100% correct.\nWe will cover this thoroughly in the following weeks.\n:::\n\n# Wrap-up\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in the .ipynb file by the submission deadline to be considered \"on time\".\n:::\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   run all code in your Jupyter notebook\n-   committed and pushed everything to your GitHub repository such that the Git pane in VS Code is empty\n:::\n\n## Grading\n\nThe lab is graded out of a total of 50 points.\n\nOn Questions 1 through 10, you can earn up to 5 points on each question:\n\n-   5: Response shows excellent understanding and addresses all or almost all of the rubric items.\n\n-   4: Response shows good understanding and addresses most of the rubric items.\n\n-   3: Response shows understanding and addresses a majority of the rubric items.\n\n-   2: Response shows effort and misses many of the rubric items.\n\n-   1: Response does not show sufficient effort or understanding and/or is largely incomplete.\n\n-   0: No attempt.\n\n",
    "supporting": [
      "lab-1_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}