{
  "hash": "2833a0ed6f465dae1fef86a00f4a1e08",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Lab 2 - Data visualization\nexecute:\n  warning: false\n  error: false\n---\n\n# Introduction\n\nThis lab will begin your journey honing your data science workflow.\n\n::: callout-note\nThis lab assumes you've completed [Lab 0](/labs/lab-0.html) and [Lab 1](/labs/lab-1.html) and doesn't repeat setup and overview content from those labs.\nIf you have not yet done those, you should go back and review them before starting with this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will…\n\n-   Gain practice writing a reproducible report using Quarto\n\n-   Continue practice with version control using Git and GitHub\n\n-   Be able to create data visualizations using `seaborn`\n\n## Getting started\n\n### Clone the repo & start new VS Code window\n\n-   Go to the course organization at [github.com/INFO-511-S25](https://github.com/INFO-511-S25) organization on GitHub.\n    Click on the repo with the prefix **lab-2**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use HTTPS** (this might already be selected by default).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In VS Code, go to *File* ➛ *New Window* ➛*Clone Git Repository (under **Start**)*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Provide repository URL or pick a repository source*.\n\n-   Click *lab-2.ipynb* to open the template Jupyter notebook file.\n    This is where you will write up your code and narrative for the lab.\n\n-   Also see similar steps within the [Setting up Python](https://datasciaz.netlify.app/computing/computing-python.html#prepare-vs-code-for-python) page on the course website.\n\n## Packages\n\nIn this lab, we will work with the **seaborn** library, which is a powerful Python library for creating data visualizations.\n\n::: {#b4750936 .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n```\n:::\n\n\n**Run All** in the document which loads these packages with the `import` function.\n\nThe `seaborn` library is built on top of `matplotlib` and closely integrated with `pandas`.\nIt provides a high-level interface for drawing attractive and informative statistical graphics.\n\n## Guidelines\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\n::: callout-note\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\nThere will be periodic reminders in this assignment to remind you to **Run all, commit, and sync** your changes to GitHub.\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Part 1\n\n**Let's take a trip to the Midwest!**\n\nWe will use the `midwest` data frame for this lab.\n\n::: {#054d1484 .cell execution_count=2}\n``` {.python .cell-code}\nmidwest = pd.read_csv('data/midwest.csv')\n```\n:::\n\n\nThe data contains demographic characteristics of counties in the Midwest region of the United States.\n\n::: callout-note\nIn the future, you will be expected to load the data.\n:::\n\n### Question 1\n\nVisualize the distribution of population density of counties using a histogram with `sns.histplot()` with four separate binwidths: a binwidth of 100, a binwidth of 1,000, a binwidth of 10,000, and a binwidth of 100,000.\n\nFor example, you can create the first plot with:\n\n::: {#134fb6bb .cell execution_count=3}\n``` {.python .cell-code}\n# Create the histogram with binwidth = 100\nsns.histplot(midwest['popdensity'], binwidth=100)\nplt.xlabel('Population Density')\nplt.ylabel('Count')\nplt.title('Population Density of Midwestern Counties\\nBinwidth = 100')\nplt.show()\n```\n:::\n\n\nYou will need to make four different histograms.\nMake sure to set informative titles and axis labels for each of your plots .Then, comment on which binwidth is most appropriate for these data and why.\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2\n\nVisualize the distribution of population density of counties again, this time using a boxplot with `sns.boxplot()`.\nMake sure to set informative titles and axis labels for your plot.\nThen, using information as needed from the box plot as well as the histogram from Question 1, describe the distribution of population density of counties and comment on any potential outliers, making sure to identify at least one county that is a clear outlier by name in your narrative and commenting on whether it makes sense to you that this county is an outlier.\nYou can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 3\n\nCreate a scatterplot of the percentage below poverty (`percbelowpoverty` on the y-axis) versus percentage of people with a college degree (`percollege` on the x-axis), where the color and shape of points are determined by `state`.\nMake sure to set informative titles, axis, and legend labels for your plot.\nFirst, describe the overall relationship between percentage of people with a college degree and percentage below poverty in Midwestern states, making sure to identify at least one county that is a clear outlier by name in your narrative.\nYou can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.\nThen, comment on whether you can identify how this relationship varies across states.\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nNow, let's examine the relationship between the same two variables, once again using different colors and shapes to represent each state, and using a separate plot for each state, i.e., with faceting using `sns.FacetGrid`.\nIn addition to points (`sns.scatterplot()`).\nMake sure to set informative titles, axis, and legend labels for your plot.\nWhich plot do you prefer - this plot or the plot in Question 3?\nBriefly explain your choice.\n\n::: render-commit-push\nRun all, commit, and sync your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 5\n\n*Do some states have counties that tend to be geographically larger than others?*\n\nTo explore this question, create side-by-side boxplots of area (`area`) of a county based on state (`state`).\nHow do typical county area sizes compare across states?\nHow do variabilities of county sizes compare across states?\nWhich state has the single largest county?\nIdentify the name of this county.\nYou can use the data viewer to identify it interactively, you do not have to write code.\n\n::: render-commit-push\nNow is another good time to Run all, commit, and sync your changes to GitHub with a meaningful commit message.\n\nOnce again, make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Question 6\n\n*Do some states have a higher percentage of their counties located in a metropolitan area?*\n\nCreate a segmented bar chart with one bar per state and the bar filled with colors according to the value of `metro` – one color indicating `Yes` and the other color indicating `No` for whether a county is considered to be a metro area.\nThe y-axis of the segmented barplot should range from 0 to 1, indicating proportions.\nCompare the percentage of counties in metro areas across the states based on this plot.\nMake sure to supplement your narrative with rough estimates of these percentages.\n\n::: callout-tip\n## Hint\n\nFor this question, you should begin with the data wrangling pipeline below.\nWe will learn more about data wrangling in the coming weeks, so this is a mini-preview.\nThis pipeline creates a new variable called `metro` based on the value of the existing variable called `inmetro`.\nIf the value of `inmetro` is equal to 1 (`'Yes' if x == 1`), it sets the value of `metro` to \"Yes\", and if not, it sets the value of `metro` to \"No\".\nThe resulting data frame is assigned back to `midwest`, overwriting the existing `midwest` data frame with a version that includes the new `metro` variable.\n\n::: {#hint .cell execution_count=4}\n``` {.python .cell-code}\nmidwest['metro'] = midwest['inmetro'].apply(lambda x: 'Yes' if x == 1 else 'No')\n```\n:::\n\n\n:::\n\n::: render-commit-push\nNow is another good time to Run all, commit, and sync your changes to GitHub with a meaningful commit message.\n\nAnd once again, make sure to commit and push all changed files so that your Git pane is empty afterward.\nWe keep repeating this because it's important and because we see students forget to do this.\nSo take a moment to make sure you're following along with the version control instructions.\n:::\n\n### Question 7\n\nRecreate the plot below, and then give it a title.\nThen, identify at least one county that is a clear outlier in Wisconsin (WI) by name.\nYou can use the data viewer to identify them interactively, you do not have to write code.\nComment on the population composition of this county by investigating the percentage of other races living there.\n\n![](images/wi-facet.png){fig-align=\"center\"}\n\n::: callout-tip\n## Hint\n\n-   [The `seaborn` reference for themes in the Python Graph Gallery](https://python-graph-gallery.com/104-seaborn-themes/) will be helpful in determining the theme.\n-   The `s`ize of the points is 50.\n-   The transparency (`alpha`) of the points is 0.5.\n-   You can put line breaks in labels with `\\n`.\n:::\n\n::: render-commit-push\nRun all, commit, and sync your final changes to GitHub with a meaningful commit message.\n\n<br>\n\nMake sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n## Part 2\n\n**Enough about the Midwest!**\n\nIn this part we will use a new, more recent, and potentially more relevant dataset on counties in Arizona.\n\nThis dataset is stored in a file called `az-county.csv` in the `data` folder of your project/repository.\n\nYou can read this file into Python with the following code:\n\n::: {#74a0a5f0 .cell execution_count=5}\n``` {.python .cell-code}\naz_county = pd.read_csv('data/az-county.csv')\n```\n:::\n\n\nThis will read the CSV (comma separated values) file from the `data` folder and store the dataset as a data frame called `az_county` in Python.\n\nThe variables in the dataset and their descriptions are as follows:\n\n-   `county`: Name of county.\n-   `state_abb`: State abbreviation (AZ).\n-   `state_name`: State name (Arizona).\n-   `land_area_m2`: Land area of county in meters-squared, based on the 2020 census.\n-   `land_area_mi2`: Land area of county in miles-squared, based on the 2020 census.\n-   `population`: Population of county, based on the 2020 census.\n-   `density`: Population density calculated as population divided by land area in miles-squared.\n\nIn addition to being more recent and more relevant, this dataset is also more complete in the sense that we know the units of population density: people per mile-squared!\n\n### Question 8\n\nFirst, guess what the relationship between population density and land area might be – positive?\nnegative?\nno relationship?\n\nThen, make a scatter plot of population density (`density` on the y-axis) vs. land area in miles-squared (`land_area_mi2` on the x-axis).\nMake sure to set an informative title and axis labels for your plot.Describe the relationship.\nWas your guess correct?\n\n### Question 9\n\nNow make a scatter plot of population density (`density` on the y-axis) vs. land area in meters-squared (`land_area_m2` on the x-axis).\nMake sure to set an informative title and axis labels for your plot.\nComment on how this scatterplot compares to the one in Exercise 8 — is the relationship displayed same or different.\nExplain why.\n\n### Question 10\n\nWhat are some insights that you found from the `az_county` data from Questions 8-9?\n\n# Wrap-up\n\n## Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in the .ipynb file by the submission deadline to be considered \"on time\".\n:::\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   run all code in your Jupyter notebook\n-   committed and pushed everything to your GitHub repository such that the Git pane in VS Code is empty\n:::\n\n## Grading\n\nThe lab is graded out of a total of 50 points.\n\nOn Questions 1 through 10, you can earn up to 5 points on each question:\n\n-   5: Response shows excellent understanding and addresses all or almost all of the rubric items.\n\n-   4: Response shows good understanding and addresses most of the rubric items.\n\n-   3: Response shows understanding and addresses a majority of the rubric items.\n\n-   2: Response shows effort and misses many of the rubric items.\n\n-   1: Response does not show sufficient effort or understanding and/or is largely incomplete.\n\n-   0: No attempt.\n\n",
    "supporting": [
      "lab-2_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}